
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e6  00800060  00002f04  00002f98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800146  00800146  0000307e  2**0
                  ALLOC
  3 .stab         00002d48  00000000  00000000  00003080  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000127d  00000000  00000000  00005dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007045  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007185  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000072f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000abd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ad38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000afc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b793  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 65 15 	jmp	0x2aca	; 0x2aca <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 34       	cpi	r26, 0x46	; 70
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e4       	ldi	r26, 0x46	; 70
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 34       	cpi	r26, 0x4A	; 74
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e3       	ldi	r26, 0x33	; 51
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e3       	ldi	r24, 0x33	; 51
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

/* counter for no.of wrong pass */
uint8 PassWrongCounter = 0;


int main (void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	e6 97       	sbiw	r28, 0x36	; 54
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 pass1[PASSWORD_SIZE],pass2[PASSWORD_SIZE],keyPressed;

	uint8 pass_flag=0 ;
     b5a:	1b a6       	std	Y+43, r1	; 0x2b
	SREG|=(1<<7); /***********enable I bit *********/
     b5c:	af e5       	ldi	r26, 0x5F	; 95
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ef e5       	ldi	r30, 0x5F	; 95
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	8c 93       	st	X, r24
	LCD_init() ;  /*********initialize LCD Screen *******/
     b6a:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_init>
	UART_init(&UART_configuration) ;     /*********initialize UART *******/
     b6e:	8b e3       	ldi	r24, 0x3B	; 59
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <UART_init>
	delaySeconds(1);
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	0e 94 bd 07 	call	0xf7a	; 0xf7a <delaySeconds>
	UART_sendByte(HMI_READY);
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <UART_sendByte>

	while (1){
		if (pass_flag==0){    /*************check is password is set or not*******/
     b82:	8b a5       	ldd	r24, Y+43	; 0x2b
     b84:	88 23       	and	r24, r24
     b86:	f1 f4       	brne	.+60     	; 0xbc4 <main+0x7e>
			UART_sendByte(IF_PASS_EXIST);
     b88:	87 e0       	ldi	r24, 0x07	; 7
     b8a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <UART_sendByte>


			if (UART_recieveByte()==PASS_EXIST){
     b8e:	0e 94 67 16 	call	0x2cce	; 0x2cce <UART_recieveByte>
     b92:	88 30       	cpi	r24, 0x08	; 8
     b94:	19 f4       	brne	.+6      	; 0xb9c <main+0x56>
				pass_flag=1;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	8b a7       	std	Y+43, r24	; 0x2b
     b9a:	f3 cf       	rjmp	.-26     	; 0xb82 <main+0x3c>
				continue;
			}
			do
			{
				getPassword(pass1);
     b9c:	ce 01       	movw	r24, r28
     b9e:	8d 96       	adiw	r24, 0x2d	; 45
     ba0:	0e 94 12 08 	call	0x1024	; 0x1024 <getPassword>
				getPasswordConfirmation(pass2);
     ba4:	ce 01       	movw	r24, r28
     ba6:	c2 96       	adiw	r24, 0x32	; 50
     ba8:	0e 94 4b 09 	call	0x1296	; 0x1296 <getPasswordConfirmation>

				pass_flag=1;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	8b a7       	std	Y+43, r24	; 0x2b
			}while (checkPasswordIsSame(pass1,pass2)==PASSWORD_NOT_MATCHED);
     bb0:	ce 01       	movw	r24, r28
     bb2:	8d 96       	adiw	r24, 0x2d	; 45
     bb4:	9e 01       	movw	r18, r28
     bb6:	2e 5c       	subi	r18, 0xCE	; 206
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	b9 01       	movw	r22, r18
     bbc:	0e 94 84 0a 	call	0x1508	; 0x1508 <checkPasswordIsSame>
     bc0:	8c 30       	cpi	r24, 0x0C	; 12
     bc2:	61 f3       	breq	.-40     	; 0xb9c <main+0x56>
		}
			LCD_clearScreen();
     bc4:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "+ :OPEN DOOR");
     bc8:	20 e6       	ldi	r18, 0x60	; 96
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	a9 01       	movw	r20, r18
     bd2:	0e 94 ad 14 	call	0x295a	; 0x295a <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1 ,0, "- :CHANGE PASSWORD");
     bd6:	2d e6       	ldi	r18, 0x6D	; 109
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	a9 01       	movw	r20, r18
     be0:	0e 94 ad 14 	call	0x295a	; 0x295a <LCD_displayStringRowColumn>


			/************loop till enter + or - ************/
			do
			{
				keyPressed = KEYPAD_getPressedKey();
     be4:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <KEYPAD_getPressedKey>
     be8:	8c a7       	std	Y+44, r24	; 0x2c
			}while(keyPressed != '+' && keyPressed != '-');
     bea:	8c a5       	ldd	r24, Y+44	; 0x2c
     bec:	8b 32       	cpi	r24, 0x2B	; 43
     bee:	19 f0       	breq	.+6      	; 0xbf6 <main+0xb0>
     bf0:	8c a5       	ldd	r24, Y+44	; 0x2c
     bf2:	8d 32       	cpi	r24, 0x2D	; 45
     bf4:	b9 f7       	brne	.-18     	; 0xbe4 <main+0x9e>

			if (keyPressed =='+')
     bf6:	8c a5       	ldd	r24, Y+44	; 0x2c
     bf8:	8b 32       	cpi	r24, 0x2B	; 43
     bfa:	09 f0       	breq	.+2      	; 0xbfe <main+0xb8>
     bfc:	97 c0       	rjmp	.+302    	; 0xd2c <main+0x1e6>
			{

				while (1){
					getPassword(pass1);
     bfe:	ce 01       	movw	r24, r28
     c00:	8d 96       	adiw	r24, 0x2d	; 45
     c02:	0e 94 12 08 	call	0x1024	; 0x1024 <getPassword>
					if (check_password(pass1)==TRUE)
     c06:	ce 01       	movw	r24, r28
     c08:	8d 96       	adiw	r24, 0x2d	; 45
     c0a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <check_password>
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	19 f4       	brne	.+6      	; 0xc18 <main+0xd2>
					{
						open_door() ;
     c12:	0e 94 39 0b 	call	0x1672	; 0x1672 <open_door>
     c16:	87 c0       	rjmp	.+270    	; 0xd26 <main+0x1e0>
						break ;
					}
					else
					{PassWrongCounter++;
     c18:	80 91 47 01 	lds	r24, 0x0147
     c1c:	8f 5f       	subi	r24, 0xFF	; 255
     c1e:	80 93 47 01 	sts	0x0147, r24
					LCD_clearScreen();
     c22:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"WRONG PASSWORD" );
     c26:	20 e8       	ldi	r18, 0x80	; 128
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	a9 01       	movw	r20, r18
     c30:	0e 94 ad 14 	call	0x295a	; 0x295a <LCD_displayStringRowColumn>
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	aa ef       	ldi	r26, 0xFA	; 250
     c3a:	b3 e4       	ldi	r27, 0x43	; 67
     c3c:	8f a3       	std	Y+39, r24	; 0x27
     c3e:	98 a7       	std	Y+40, r25	; 0x28
     c40:	a9 a7       	std	Y+41, r26	; 0x29
     c42:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c44:	6f a1       	ldd	r22, Y+39	; 0x27
     c46:	78 a5       	ldd	r23, Y+40	; 0x28
     c48:	89 a5       	ldd	r24, Y+41	; 0x29
     c4a:	9a a5       	ldd	r25, Y+42	; 0x2a
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	4a ef       	ldi	r20, 0xFA	; 250
     c52:	54 e4       	ldi	r21, 0x44	; 68
     c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	8b a3       	std	Y+35, r24	; 0x23
     c5e:	9c a3       	std	Y+36, r25	; 0x24
     c60:	ad a3       	std	Y+37, r26	; 0x25
     c62:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     c64:	6b a1       	ldd	r22, Y+35	; 0x23
     c66:	7c a1       	ldd	r23, Y+36	; 0x24
     c68:	8d a1       	ldd	r24, Y+37	; 0x25
     c6a:	9e a1       	ldd	r25, Y+38	; 0x26
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	40 e8       	ldi	r20, 0x80	; 128
     c72:	5f e3       	ldi	r21, 0x3F	; 63
     c74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c78:	88 23       	and	r24, r24
     c7a:	2c f4       	brge	.+10     	; 0xc86 <main+0x140>
		__ticks = 1;
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	9a a3       	std	Y+34, r25	; 0x22
     c82:	89 a3       	std	Y+33, r24	; 0x21
     c84:	3f c0       	rjmp	.+126    	; 0xd04 <main+0x1be>
	else if (__tmp > 65535)
     c86:	6b a1       	ldd	r22, Y+35	; 0x23
     c88:	7c a1       	ldd	r23, Y+36	; 0x24
     c8a:	8d a1       	ldd	r24, Y+37	; 0x25
     c8c:	9e a1       	ldd	r25, Y+38	; 0x26
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	3f ef       	ldi	r19, 0xFF	; 255
     c92:	4f e7       	ldi	r20, 0x7F	; 127
     c94:	57 e4       	ldi	r21, 0x47	; 71
     c96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c9a:	18 16       	cp	r1, r24
     c9c:	4c f5       	brge	.+82     	; 0xcf0 <main+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c9e:	6f a1       	ldd	r22, Y+39	; 0x27
     ca0:	78 a5       	ldd	r23, Y+40	; 0x28
     ca2:	89 a5       	ldd	r24, Y+41	; 0x29
     ca4:	9a a5       	ldd	r25, Y+42	; 0x2a
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 e2       	ldi	r20, 0x20	; 32
     cac:	51 e4       	ldi	r21, 0x41	; 65
     cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	bc 01       	movw	r22, r24
     cb8:	cd 01       	movw	r24, r26
     cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cbe:	dc 01       	movw	r26, r24
     cc0:	cb 01       	movw	r24, r22
     cc2:	9a a3       	std	Y+34, r25	; 0x22
     cc4:	89 a3       	std	Y+33, r24	; 0x21
     cc6:	0f c0       	rjmp	.+30     	; 0xce6 <main+0x1a0>
     cc8:	88 ec       	ldi	r24, 0xC8	; 200
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	98 a3       	std	Y+32, r25	; 0x20
     cce:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cd0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cd2:	98 a1       	ldd	r25, Y+32	; 0x20
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	f1 f7       	brne	.-4      	; 0xcd4 <main+0x18e>
     cd8:	98 a3       	std	Y+32, r25	; 0x20
     cda:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cdc:	89 a1       	ldd	r24, Y+33	; 0x21
     cde:	9a a1       	ldd	r25, Y+34	; 0x22
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	9a a3       	std	Y+34, r25	; 0x22
     ce4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ce6:	89 a1       	ldd	r24, Y+33	; 0x21
     ce8:	9a a1       	ldd	r25, Y+34	; 0x22
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	69 f7       	brne	.-38     	; 0xcc8 <main+0x182>
     cee:	14 c0       	rjmp	.+40     	; 0xd18 <main+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cf0:	6b a1       	ldd	r22, Y+35	; 0x23
     cf2:	7c a1       	ldd	r23, Y+36	; 0x24
     cf4:	8d a1       	ldd	r24, Y+37	; 0x25
     cf6:	9e a1       	ldd	r25, Y+38	; 0x26
     cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	9a a3       	std	Y+34, r25	; 0x22
     d02:	89 a3       	std	Y+33, r24	; 0x21
     d04:	89 a1       	ldd	r24, Y+33	; 0x21
     d06:	9a a1       	ldd	r25, Y+34	; 0x22
     d08:	9e 8f       	std	Y+30, r25	; 0x1e
     d0a:	8d 8f       	std	Y+29, r24	; 0x1d
     d0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d0e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d10:	01 97       	sbiw	r24, 0x01	; 1
     d12:	f1 f7       	brne	.-4      	; 0xd10 <main+0x1ca>
     d14:	9e 8f       	std	Y+30, r25	; 0x1e
     d16:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(500);
					}
					if (PassWrongCounter==3)
     d18:	80 91 47 01 	lds	r24, 0x0147
     d1c:	83 30       	cpi	r24, 0x03	; 3
     d1e:	09 f0       	breq	.+2      	; 0xd22 <main+0x1dc>
     d20:	6e cf       	rjmp	.-292    	; 0xbfe <main+0xb8>
					{
						ALARM_ONN();
     d22:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <ALARM_ONN>
						break;
					}
				}
				PassWrongCounter=0; /**********reset passwrong counter*********/
     d26:	10 92 47 01 	sts	0x0147, r1
     d2a:	2b cf       	rjmp	.-426    	; 0xb82 <main+0x3c>
			}
			else{


				while (1){
					getPassword(pass1);
     d2c:	ce 01       	movw	r24, r28
     d2e:	8d 96       	adiw	r24, 0x2d	; 45
     d30:	0e 94 12 08 	call	0x1024	; 0x1024 <getPassword>
					if (check_password(pass1)==TRUE)
     d34:	ce 01       	movw	r24, r28
     d36:	8d 96       	adiw	r24, 0x2d	; 45
     d38:	0e 94 0a 0b 	call	0x1614	; 0x1614 <check_password>
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	09 f0       	breq	.+2      	; 0xd42 <main+0x1fc>
     d40:	85 c0       	rjmp	.+266    	; 0xe4c <main+0x306>
					{
						LCD_clearScreen();
     d42:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
						LCD_moveCursor(0,0);
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
						LCD_displayString("change password");
     d4e:	8f e8       	ldi	r24, 0x8F	; 143
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	aa e7       	ldi	r26, 0x7A	; 122
     d5c:	b4 e4       	ldi	r27, 0x44	; 68
     d5e:	89 8f       	std	Y+25, r24	; 0x19
     d60:	9a 8f       	std	Y+26, r25	; 0x1a
     d62:	ab 8f       	std	Y+27, r26	; 0x1b
     d64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d66:	69 8d       	ldd	r22, Y+25	; 0x19
     d68:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	4a ef       	ldi	r20, 0xFA	; 250
     d74:	54 e4       	ldi	r21, 0x44	; 68
     d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	8d 8b       	std	Y+21, r24	; 0x15
     d80:	9e 8b       	std	Y+22, r25	; 0x16
     d82:	af 8b       	std	Y+23, r26	; 0x17
     d84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d86:	6d 89       	ldd	r22, Y+21	; 0x15
     d88:	7e 89       	ldd	r23, Y+22	; 0x16
     d8a:	8f 89       	ldd	r24, Y+23	; 0x17
     d8c:	98 8d       	ldd	r25, Y+24	; 0x18
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	40 e8       	ldi	r20, 0x80	; 128
     d94:	5f e3       	ldi	r21, 0x3F	; 63
     d96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d9a:	88 23       	and	r24, r24
     d9c:	2c f4       	brge	.+10     	; 0xda8 <main+0x262>
		__ticks = 1;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	9c 8b       	std	Y+20, r25	; 0x14
     da4:	8b 8b       	std	Y+19, r24	; 0x13
     da6:	3f c0       	rjmp	.+126    	; 0xe26 <main+0x2e0>
	else if (__tmp > 65535)
     da8:	6d 89       	ldd	r22, Y+21	; 0x15
     daa:	7e 89       	ldd	r23, Y+22	; 0x16
     dac:	8f 89       	ldd	r24, Y+23	; 0x17
     dae:	98 8d       	ldd	r25, Y+24	; 0x18
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	3f ef       	ldi	r19, 0xFF	; 255
     db4:	4f e7       	ldi	r20, 0x7F	; 127
     db6:	57 e4       	ldi	r21, 0x47	; 71
     db8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dbc:	18 16       	cp	r1, r24
     dbe:	4c f5       	brge	.+82     	; 0xe12 <main+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc0:	69 8d       	ldd	r22, Y+25	; 0x19
     dc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	40 e2       	ldi	r20, 0x20	; 32
     dce:	51 e4       	ldi	r21, 0x41	; 65
     dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	bc 01       	movw	r22, r24
     dda:	cd 01       	movw	r24, r26
     ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	9c 8b       	std	Y+20, r25	; 0x14
     de6:	8b 8b       	std	Y+19, r24	; 0x13
     de8:	0f c0       	rjmp	.+30     	; 0xe08 <main+0x2c2>
     dea:	88 ec       	ldi	r24, 0xC8	; 200
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	9a 8b       	std	Y+18, r25	; 0x12
     df0:	89 8b       	std	Y+17, r24	; 0x11
     df2:	89 89       	ldd	r24, Y+17	; 0x11
     df4:	9a 89       	ldd	r25, Y+18	; 0x12
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <main+0x2b0>
     dfa:	9a 8b       	std	Y+18, r25	; 0x12
     dfc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dfe:	8b 89       	ldd	r24, Y+19	; 0x13
     e00:	9c 89       	ldd	r25, Y+20	; 0x14
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	9c 8b       	std	Y+20, r25	; 0x14
     e06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e08:	8b 89       	ldd	r24, Y+19	; 0x13
     e0a:	9c 89       	ldd	r25, Y+20	; 0x14
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	69 f7       	brne	.-38     	; 0xdea <main+0x2a4>
     e10:	14 c0       	rjmp	.+40     	; 0xe3a <main+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e12:	6d 89       	ldd	r22, Y+21	; 0x15
     e14:	7e 89       	ldd	r23, Y+22	; 0x16
     e16:	8f 89       	ldd	r24, Y+23	; 0x17
     e18:	98 8d       	ldd	r25, Y+24	; 0x18
     e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	9c 8b       	std	Y+20, r25	; 0x14
     e24:	8b 8b       	std	Y+19, r24	; 0x13
     e26:	8b 89       	ldd	r24, Y+19	; 0x13
     e28:	9c 89       	ldd	r25, Y+20	; 0x14
     e2a:	98 8b       	std	Y+16, r25	; 0x10
     e2c:	8f 87       	std	Y+15, r24	; 0x0f
     e2e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e30:	98 89       	ldd	r25, Y+16	; 0x10
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <main+0x2ec>
     e36:	98 8b       	std	Y+16, r25	; 0x10
     e38:	8f 87       	std	Y+15, r24	; 0x0f
						//delaySeconds(1);
						_delay_ms(1000);
						pass_flag=0 ;/************reset pass_flag*********/
     e3a:	1b a6       	std	Y+43, r1	; 0x2b
						/* deletes the password in the EEPROM */
						/***********/
						UART_sendByte(RESET_PASS);
     e3c:	8d e0       	ldi	r24, 0x0D	; 13
     e3e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <UART_sendByte>
						while(UART_recieveByte() != RESET_COMPLETE );
     e42:	0e 94 67 16 	call	0x2cce	; 0x2cce <UART_recieveByte>
     e46:	8e 30       	cpi	r24, 0x0E	; 14
     e48:	e1 f7       	brne	.-8      	; 0xe42 <main+0x2fc>
     e4a:	88 c0       	rjmp	.+272    	; 0xf5c <main+0x416>

						break;
					}
					else
					{
						PassWrongCounter++;
     e4c:	80 91 47 01 	lds	r24, 0x0147
     e50:	8f 5f       	subi	r24, 0xFF	; 255
     e52:	80 93 47 01 	sts	0x0147, r24
						LCD_clearScreen();
     e56:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
						LCD_moveCursor(0,0);
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
						LCD_displayString("Wrong PASSWORD");
     e62:	8f e9       	ldi	r24, 0x9F	; 159
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	aa ef       	ldi	r26, 0xFA	; 250
     e70:	b3 e4       	ldi	r27, 0x43	; 67
     e72:	8b 87       	std	Y+11, r24	; 0x0b
     e74:	9c 87       	std	Y+12, r25	; 0x0c
     e76:	ad 87       	std	Y+13, r26	; 0x0d
     e78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e80:	9e 85       	ldd	r25, Y+14	; 0x0e
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	4a ef       	ldi	r20, 0xFA	; 250
     e88:	54 e4       	ldi	r21, 0x44	; 68
     e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	8f 83       	std	Y+7, r24	; 0x07
     e94:	98 87       	std	Y+8, r25	; 0x08
     e96:	a9 87       	std	Y+9, r26	; 0x09
     e98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e9a:	6f 81       	ldd	r22, Y+7	; 0x07
     e9c:	78 85       	ldd	r23, Y+8	; 0x08
     e9e:	89 85       	ldd	r24, Y+9	; 0x09
     ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e8       	ldi	r20, 0x80	; 128
     ea8:	5f e3       	ldi	r21, 0x3F	; 63
     eaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eae:	88 23       	and	r24, r24
     eb0:	2c f4       	brge	.+10     	; 0xebc <main+0x376>
		__ticks = 1;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	9e 83       	std	Y+6, r25	; 0x06
     eb8:	8d 83       	std	Y+5, r24	; 0x05
     eba:	3f c0       	rjmp	.+126    	; 0xf3a <main+0x3f4>
	else if (__tmp > 65535)
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	3f ef       	ldi	r19, 0xFF	; 255
     ec8:	4f e7       	ldi	r20, 0x7F	; 127
     eca:	57 e4       	ldi	r21, 0x47	; 71
     ecc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ed0:	18 16       	cp	r1, r24
     ed2:	4c f5       	brge	.+82     	; 0xf26 <main+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eda:	9e 85       	ldd	r25, Y+14	; 0x0e
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e2       	ldi	r20, 0x20	; 32
     ee2:	51 e4       	ldi	r21, 0x41	; 65
     ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	bc 01       	movw	r22, r24
     eee:	cd 01       	movw	r24, r26
     ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	9e 83       	std	Y+6, r25	; 0x06
     efa:	8d 83       	std	Y+5, r24	; 0x05
     efc:	0f c0       	rjmp	.+30     	; 0xf1c <main+0x3d6>
     efe:	88 ec       	ldi	r24, 0xC8	; 200
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9c 83       	std	Y+4, r25	; 0x04
     f04:	8b 83       	std	Y+3, r24	; 0x03
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	9c 81       	ldd	r25, Y+4	; 0x04
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <main+0x3c4>
     f0e:	9c 83       	std	Y+4, r25	; 0x04
     f10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	9e 83       	std	Y+6, r25	; 0x06
     f1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	69 f7       	brne	.-38     	; 0xefe <main+0x3b8>
     f24:	14 c0       	rjmp	.+40     	; 0xf4e <main+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f26:	6f 81       	ldd	r22, Y+7	; 0x07
     f28:	78 85       	ldd	r23, Y+8	; 0x08
     f2a:	89 85       	ldd	r24, Y+9	; 0x09
     f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	9e 83       	std	Y+6, r25	; 0x06
     f38:	8d 83       	std	Y+5, r24	; 0x05
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	9a 83       	std	Y+2, r25	; 0x02
     f40:	89 83       	std	Y+1, r24	; 0x01
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <main+0x400>
     f4a:	9a 83       	std	Y+2, r25	; 0x02
     f4c:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(500);
					}
					if (PassWrongCounter==3)
     f4e:	80 91 47 01 	lds	r24, 0x0147
     f52:	83 30       	cpi	r24, 0x03	; 3
     f54:	09 f0       	breq	.+2      	; 0xf58 <main+0x412>
     f56:	ea ce       	rjmp	.-556    	; 0xd2c <main+0x1e6>
					{
						ALARM_ONN();
     f58:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <ALARM_ONN>
						break;
					}
				}
			PassWrongCounter=0; /**********reset passwrong counter*********/
     f5c:	10 92 47 01 	sts	0x0147, r1
     f60:	10 ce       	rjmp	.-992    	; 0xb82 <main+0x3c>

00000f62 <C_second>:
 * ● Inputs: seconds
 * ● Return: None
 *********************************************************************/

void C_second(void)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
	g_sec++;
     f6a:	80 91 46 01 	lds	r24, 0x0146
     f6e:	8f 5f       	subi	r24, 0xFF	; 255
     f70:	80 93 46 01 	sts	0x0146, r24
}
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <delaySeconds>:


void delaySeconds(uint8 sec)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	2c 97       	sbiw	r28, 0x0c	; 12
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	8f 83       	std	Y+7, r24	; 0x07

	Timer1_setCallBack(C_second);         /* setting the callBack function to count seconds */
     f90:	81 eb       	ldi	r24, 0xB1	; 177
     f92:	97 e0       	ldi	r25, 0x07	; 7
     f94:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <Timer1_setCallBack>
	/* timer1 configurations to count sec per interrupt */
	Timer1_ConfigType timer1_Config = {0,31250,TIMER1_CLK_256,TIMER1_CTC_Mode};
     f98:	ce 01       	movw	r24, r28
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	99 87       	std	Y+9, r25	; 0x09
     f9e:	88 87       	std	Y+8, r24	; 0x08
     fa0:	e0 e4       	ldi	r30, 0x40	; 64
     fa2:	f1 e0       	ldi	r31, 0x01	; 1
     fa4:	fb 87       	std	Y+11, r31	; 0x0b
     fa6:	ea 87       	std	Y+10, r30	; 0x0a
     fa8:	f6 e0       	ldi	r31, 0x06	; 6
     faa:	fc 87       	std	Y+12, r31	; 0x0c
     fac:	ea 85       	ldd	r30, Y+10	; 0x0a
     fae:	fb 85       	ldd	r31, Y+11	; 0x0b
     fb0:	00 80       	ld	r0, Z
     fb2:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb4:	9b 85       	ldd	r25, Y+11	; 0x0b
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	9b 87       	std	Y+11, r25	; 0x0b
     fba:	8a 87       	std	Y+10, r24	; 0x0a
     fbc:	e8 85       	ldd	r30, Y+8	; 0x08
     fbe:	f9 85       	ldd	r31, Y+9	; 0x09
     fc0:	00 82       	st	Z, r0
     fc2:	88 85       	ldd	r24, Y+8	; 0x08
     fc4:	99 85       	ldd	r25, Y+9	; 0x09
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	99 87       	std	Y+9, r25	; 0x09
     fca:	88 87       	std	Y+8, r24	; 0x08
     fcc:	9c 85       	ldd	r25, Y+12	; 0x0c
     fce:	91 50       	subi	r25, 0x01	; 1
     fd0:	9c 87       	std	Y+12, r25	; 0x0c
     fd2:	ec 85       	ldd	r30, Y+12	; 0x0c
     fd4:	ee 23       	and	r30, r30
     fd6:	51 f7       	brne	.-44     	; 0xfac <delaySeconds+0x32>
	Timer1_init(&timer1_Config);
     fd8:	ce 01       	movw	r24, r28
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <Timer1_init>
	while(g_sec < sec);
     fe0:	90 91 46 01 	lds	r25, 0x0146
     fe4:	8f 81       	ldd	r24, Y+7	; 0x07
     fe6:	98 17       	cp	r25, r24
     fe8:	d8 f3       	brcs	.-10     	; 0xfe0 <delaySeconds+0x66>
	g_sec = 0;
     fea:	10 92 46 01 	sts	0x0146, r1
	Timer1_deInit();
     fee:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <Timer1_deInit>

}
     ff2:	2c 96       	adiw	r28, 0x0c	; 12
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <setPassword>:

void setPassword(void){
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    100c:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
	LCD_displayString("seting new password");
    1010:	8e ea       	ldi	r24, 0xAE	; 174
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>

	UART_sendByte(CREATE_NEW_PASS);
    1018:	85 e0       	ldi	r24, 0x05	; 5
    101a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <UART_sendByte>

}
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <getPassword>:
 * ● Description
 *   ⮚ Function to get password
 * ● Inputs: password 1
 * ● Return: None
 *********************************************************************/
void getPassword(uint8 *pass){
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	a0 97       	sbiw	r28, 0x20	; 32
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	98 a3       	std	Y+32, r25	; 0x20
    103a:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8 i; /*******counter***********/
	uint8 keyPressed ; /*************store pressed key*********/
	LCD_clearScreen();
    103c:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
	LCD_displayString("PLEASE, ENTER PASS:");
    1040:	82 ec       	ldi	r24, 0xC2	; 194
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>

	for (i=0;i<PASSWORD_SIZE;i++){
    1050:	1e 8e       	std	Y+30, r1	; 0x1e
    1052:	10 c1       	rjmp	.+544    	; 0x1274 <getPassword+0x250>
		do
		{
			keyPressed = KEYPAD_getPressedKey();
    1054:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <KEYPAD_getPressedKey>
    1058:	8d 8f       	std	Y+29, r24	; 0x1d
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	aa ef       	ldi	r26, 0xFA	; 250
    1060:	b3 e4       	ldi	r27, 0x43	; 67
    1062:	89 8f       	std	Y+25, r24	; 0x19
    1064:	9a 8f       	std	Y+26, r25	; 0x1a
    1066:	ab 8f       	std	Y+27, r26	; 0x1b
    1068:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106a:	69 8d       	ldd	r22, Y+25	; 0x19
    106c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    106e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1070:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	4a ef       	ldi	r20, 0xFA	; 250
    1078:	54 e4       	ldi	r21, 0x44	; 68
    107a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	8d 8b       	std	Y+21, r24	; 0x15
    1084:	9e 8b       	std	Y+22, r25	; 0x16
    1086:	af 8b       	std	Y+23, r26	; 0x17
    1088:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    108a:	6d 89       	ldd	r22, Y+21	; 0x15
    108c:	7e 89       	ldd	r23, Y+22	; 0x16
    108e:	8f 89       	ldd	r24, Y+23	; 0x17
    1090:	98 8d       	ldd	r25, Y+24	; 0x18
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e8       	ldi	r20, 0x80	; 128
    1098:	5f e3       	ldi	r21, 0x3F	; 63
    109a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    109e:	88 23       	and	r24, r24
    10a0:	2c f4       	brge	.+10     	; 0x10ac <getPassword+0x88>
		__ticks = 1;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	9c 8b       	std	Y+20, r25	; 0x14
    10a8:	8b 8b       	std	Y+19, r24	; 0x13
    10aa:	3f c0       	rjmp	.+126    	; 0x112a <getPassword+0x106>
	else if (__tmp > 65535)
    10ac:	6d 89       	ldd	r22, Y+21	; 0x15
    10ae:	7e 89       	ldd	r23, Y+22	; 0x16
    10b0:	8f 89       	ldd	r24, Y+23	; 0x17
    10b2:	98 8d       	ldd	r25, Y+24	; 0x18
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	3f ef       	ldi	r19, 0xFF	; 255
    10b8:	4f e7       	ldi	r20, 0x7F	; 127
    10ba:	57 e4       	ldi	r21, 0x47	; 71
    10bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10c0:	18 16       	cp	r1, r24
    10c2:	4c f5       	brge	.+82     	; 0x1116 <getPassword+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c4:	69 8d       	ldd	r22, Y+25	; 0x19
    10c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e2       	ldi	r20, 0x20	; 32
    10d2:	51 e4       	ldi	r21, 0x41	; 65
    10d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	bc 01       	movw	r22, r24
    10de:	cd 01       	movw	r24, r26
    10e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	9c 8b       	std	Y+20, r25	; 0x14
    10ea:	8b 8b       	std	Y+19, r24	; 0x13
    10ec:	0f c0       	rjmp	.+30     	; 0x110c <getPassword+0xe8>
    10ee:	88 ec       	ldi	r24, 0xC8	; 200
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	9a 8b       	std	Y+18, r25	; 0x12
    10f4:	89 8b       	std	Y+17, r24	; 0x11
    10f6:	89 89       	ldd	r24, Y+17	; 0x11
    10f8:	9a 89       	ldd	r25, Y+18	; 0x12
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	f1 f7       	brne	.-4      	; 0x10fa <getPassword+0xd6>
    10fe:	9a 8b       	std	Y+18, r25	; 0x12
    1100:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1102:	8b 89       	ldd	r24, Y+19	; 0x13
    1104:	9c 89       	ldd	r25, Y+20	; 0x14
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	9c 8b       	std	Y+20, r25	; 0x14
    110a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110c:	8b 89       	ldd	r24, Y+19	; 0x13
    110e:	9c 89       	ldd	r25, Y+20	; 0x14
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	69 f7       	brne	.-38     	; 0x10ee <getPassword+0xca>
    1114:	14 c0       	rjmp	.+40     	; 0x113e <getPassword+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1116:	6d 89       	ldd	r22, Y+21	; 0x15
    1118:	7e 89       	ldd	r23, Y+22	; 0x16
    111a:	8f 89       	ldd	r24, Y+23	; 0x17
    111c:	98 8d       	ldd	r25, Y+24	; 0x18
    111e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	9c 8b       	std	Y+20, r25	; 0x14
    1128:	8b 8b       	std	Y+19, r24	; 0x13
    112a:	8b 89       	ldd	r24, Y+19	; 0x13
    112c:	9c 89       	ldd	r25, Y+20	; 0x14
    112e:	98 8b       	std	Y+16, r25	; 0x10
    1130:	8f 87       	std	Y+15, r24	; 0x0f
    1132:	8f 85       	ldd	r24, Y+15	; 0x0f
    1134:	98 89       	ldd	r25, Y+16	; 0x10
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	f1 f7       	brne	.-4      	; 0x1136 <getPassword+0x112>
    113a:	98 8b       	std	Y+16, r25	; 0x10
    113c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
		}while((keyPressed > 9));
    113e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1140:	8a 30       	cpi	r24, 0x0A	; 10
    1142:	08 f0       	brcs	.+2      	; 0x1146 <getPassword+0x122>
    1144:	87 cf       	rjmp	.-242    	; 0x1054 <getPassword+0x30>
		pass[i] = keyPressed;
    1146:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    114e:	98 a1       	ldd	r25, Y+32	; 0x20
    1150:	fc 01       	movw	r30, r24
    1152:	e2 0f       	add	r30, r18
    1154:	f3 1f       	adc	r31, r19
    1156:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1158:	80 83       	st	Z, r24
		LCD_moveCursor(1, i);
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    115e:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
		LCD_intgerToString(pass[i]);
    1162:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	8f 8d       	ldd	r24, Y+31	; 0x1f
    116a:	98 a1       	ldd	r25, Y+32	; 0x20
    116c:	fc 01       	movw	r30, r24
    116e:	e2 0f       	add	r30, r18
    1170:	f3 1f       	adc	r31, r19
    1172:	80 81       	ld	r24, Z
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 c6 14 	call	0x298c	; 0x298c <LCD_intgerToString>
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a8 ec       	ldi	r26, 0xC8	; 200
    1182:	b2 e4       	ldi	r27, 0x42	; 66
    1184:	8b 87       	std	Y+11, r24	; 0x0b
    1186:	9c 87       	std	Y+12, r25	; 0x0c
    1188:	ad 87       	std	Y+13, r26	; 0x0d
    118a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118c:	6b 85       	ldd	r22, Y+11	; 0x0b
    118e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1190:	8d 85       	ldd	r24, Y+13	; 0x0d
    1192:	9e 85       	ldd	r25, Y+14	; 0x0e
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	4a ef       	ldi	r20, 0xFA	; 250
    119a:	54 e4       	ldi	r21, 0x44	; 68
    119c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	8f 83       	std	Y+7, r24	; 0x07
    11a6:	98 87       	std	Y+8, r25	; 0x08
    11a8:	a9 87       	std	Y+9, r26	; 0x09
    11aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11ac:	6f 81       	ldd	r22, Y+7	; 0x07
    11ae:	78 85       	ldd	r23, Y+8	; 0x08
    11b0:	89 85       	ldd	r24, Y+9	; 0x09
    11b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e8       	ldi	r20, 0x80	; 128
    11ba:	5f e3       	ldi	r21, 0x3F	; 63
    11bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11c0:	88 23       	and	r24, r24
    11c2:	2c f4       	brge	.+10     	; 0x11ce <getPassword+0x1aa>
		__ticks = 1;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	9e 83       	std	Y+6, r25	; 0x06
    11ca:	8d 83       	std	Y+5, r24	; 0x05
    11cc:	3f c0       	rjmp	.+126    	; 0x124c <getPassword+0x228>
	else if (__tmp > 65535)
    11ce:	6f 81       	ldd	r22, Y+7	; 0x07
    11d0:	78 85       	ldd	r23, Y+8	; 0x08
    11d2:	89 85       	ldd	r24, Y+9	; 0x09
    11d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	3f ef       	ldi	r19, 0xFF	; 255
    11da:	4f e7       	ldi	r20, 0x7F	; 127
    11dc:	57 e4       	ldi	r21, 0x47	; 71
    11de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11e2:	18 16       	cp	r1, r24
    11e4:	4c f5       	brge	.+82     	; 0x1238 <getPassword+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	40 e2       	ldi	r20, 0x20	; 32
    11f4:	51 e4       	ldi	r21, 0x41	; 65
    11f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	bc 01       	movw	r22, r24
    1200:	cd 01       	movw	r24, r26
    1202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	9e 83       	std	Y+6, r25	; 0x06
    120c:	8d 83       	std	Y+5, r24	; 0x05
    120e:	0f c0       	rjmp	.+30     	; 0x122e <getPassword+0x20a>
    1210:	88 ec       	ldi	r24, 0xC8	; 200
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	9c 83       	std	Y+4, r25	; 0x04
    1216:	8b 83       	std	Y+3, r24	; 0x03
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <getPassword+0x1f8>
    1220:	9c 83       	std	Y+4, r25	; 0x04
    1222:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1224:	8d 81       	ldd	r24, Y+5	; 0x05
    1226:	9e 81       	ldd	r25, Y+6	; 0x06
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	9e 83       	std	Y+6, r25	; 0x06
    122c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	69 f7       	brne	.-38     	; 0x1210 <getPassword+0x1ec>
    1236:	14 c0       	rjmp	.+40     	; 0x1260 <getPassword+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1238:	6f 81       	ldd	r22, Y+7	; 0x07
    123a:	78 85       	ldd	r23, Y+8	; 0x08
    123c:	89 85       	ldd	r24, Y+9	; 0x09
    123e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	9e 83       	std	Y+6, r25	; 0x06
    124a:	8d 83       	std	Y+5, r24	; 0x05
    124c:	8d 81       	ldd	r24, Y+5	; 0x05
    124e:	9e 81       	ldd	r25, Y+6	; 0x06
    1250:	9a 83       	std	Y+2, r25	; 0x02
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	9a 81       	ldd	r25, Y+2	; 0x02
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <getPassword+0x234>
    125c:	9a 83       	std	Y+2, r25	; 0x02
    125e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		LCD_moveCursor(1, i);
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1264:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
		LCD_displayCharacter('*');
    1268:	8a e2       	ldi	r24, 0x2A	; 42
    126a:	0e 94 53 12 	call	0x24a6	; 0x24a6 <LCD_displayCharacter>
	uint8 keyPressed ; /*************store pressed key*********/
	LCD_clearScreen();
	LCD_displayString("PLEASE, ENTER PASS:");
	LCD_moveCursor(1, 0);

	for (i=0;i<PASSWORD_SIZE;i++){
    126e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1270:	8f 5f       	subi	r24, 0xFF	; 255
    1272:	8e 8f       	std	Y+30, r24	; 0x1e
    1274:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1276:	85 30       	cpi	r24, 0x05	; 5
    1278:	08 f4       	brcc	.+2      	; 0x127c <getPassword+0x258>
    127a:	ec ce       	rjmp	.-552    	; 0x1054 <getPassword+0x30>
		_delay_ms(100);
		LCD_moveCursor(1, i);
		LCD_displayCharacter('*');

	}
	while (KEYPAD_getPressedKey()!=13);
    127c:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <KEYPAD_getPressedKey>
    1280:	8d 30       	cpi	r24, 0x0D	; 13
    1282:	e1 f7       	brne	.-8      	; 0x127c <getPassword+0x258>



}
    1284:	a0 96       	adiw	r28, 0x20	; 32
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	f8 94       	cli
    128a:	de bf       	out	0x3e, r29	; 62
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	cd bf       	out	0x3d, r28	; 61
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <getPasswordConfirmation>:
 *   ⮚ Function to confirm password
 * ● Inputs: password 2
 * ● Return: None
 *********************************************************************/
void getPasswordConfirmation(uint8 * pass)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	a0 97       	sbiw	r28, 0x20	; 32
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	98 a3       	std	Y+32, r25	; 0x20
    12ac:	8f 8f       	std	Y+31, r24	; 0x1f
	/* variable to store pressed key */
	uint8 keyPressed;
	/* counter variable for FOR Loop */
	uint8 i;
	LCD_clearScreen();
    12ae:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
	LCD_displayString("please, re-enter the same pass:");
    12ba:	86 ed       	ldi	r24, 0xD6	; 214
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
	LCD_moveCursor(1, 0);
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>


	/* loop to get the password Confirmation */
	for(i=0;i<5;i++)
    12ca:	1d 8e       	std	Y+29, r1	; 0x1d
    12cc:	0c c1       	rjmp	.+536    	; 0x14e6 <getPasswordConfirmation+0x250>
	{
		do
		{
			keyPressed = KEYPAD_getPressedKey();
    12ce:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <KEYPAD_getPressedKey>
    12d2:	8e 8f       	std	Y+30, r24	; 0x1e
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	aa ef       	ldi	r26, 0xFA	; 250
    12da:	b3 e4       	ldi	r27, 0x43	; 67
    12dc:	89 8f       	std	Y+25, r24	; 0x19
    12de:	9a 8f       	std	Y+26, r25	; 0x1a
    12e0:	ab 8f       	std	Y+27, r26	; 0x1b
    12e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e4:	69 8d       	ldd	r22, Y+25	; 0x19
    12e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	4a ef       	ldi	r20, 0xFA	; 250
    12f2:	54 e4       	ldi	r21, 0x44	; 68
    12f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	8d 8b       	std	Y+21, r24	; 0x15
    12fe:	9e 8b       	std	Y+22, r25	; 0x16
    1300:	af 8b       	std	Y+23, r26	; 0x17
    1302:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1304:	6d 89       	ldd	r22, Y+21	; 0x15
    1306:	7e 89       	ldd	r23, Y+22	; 0x16
    1308:	8f 89       	ldd	r24, Y+23	; 0x17
    130a:	98 8d       	ldd	r25, Y+24	; 0x18
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e8       	ldi	r20, 0x80	; 128
    1312:	5f e3       	ldi	r21, 0x3F	; 63
    1314:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1318:	88 23       	and	r24, r24
    131a:	2c f4       	brge	.+10     	; 0x1326 <getPasswordConfirmation+0x90>
		__ticks = 1;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	9c 8b       	std	Y+20, r25	; 0x14
    1322:	8b 8b       	std	Y+19, r24	; 0x13
    1324:	3f c0       	rjmp	.+126    	; 0x13a4 <getPasswordConfirmation+0x10e>
	else if (__tmp > 65535)
    1326:	6d 89       	ldd	r22, Y+21	; 0x15
    1328:	7e 89       	ldd	r23, Y+22	; 0x16
    132a:	8f 89       	ldd	r24, Y+23	; 0x17
    132c:	98 8d       	ldd	r25, Y+24	; 0x18
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	3f ef       	ldi	r19, 0xFF	; 255
    1332:	4f e7       	ldi	r20, 0x7F	; 127
    1334:	57 e4       	ldi	r21, 0x47	; 71
    1336:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    133a:	18 16       	cp	r1, r24
    133c:	4c f5       	brge	.+82     	; 0x1390 <getPasswordConfirmation+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133e:	69 8d       	ldd	r22, Y+25	; 0x19
    1340:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1342:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1344:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e2       	ldi	r20, 0x20	; 32
    134c:	51 e4       	ldi	r21, 0x41	; 65
    134e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	bc 01       	movw	r22, r24
    1358:	cd 01       	movw	r24, r26
    135a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	9c 8b       	std	Y+20, r25	; 0x14
    1364:	8b 8b       	std	Y+19, r24	; 0x13
    1366:	0f c0       	rjmp	.+30     	; 0x1386 <getPasswordConfirmation+0xf0>
    1368:	88 ec       	ldi	r24, 0xC8	; 200
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	9a 8b       	std	Y+18, r25	; 0x12
    136e:	89 8b       	std	Y+17, r24	; 0x11
    1370:	89 89       	ldd	r24, Y+17	; 0x11
    1372:	9a 89       	ldd	r25, Y+18	; 0x12
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <getPasswordConfirmation+0xde>
    1378:	9a 8b       	std	Y+18, r25	; 0x12
    137a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137c:	8b 89       	ldd	r24, Y+19	; 0x13
    137e:	9c 89       	ldd	r25, Y+20	; 0x14
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	9c 8b       	std	Y+20, r25	; 0x14
    1384:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1386:	8b 89       	ldd	r24, Y+19	; 0x13
    1388:	9c 89       	ldd	r25, Y+20	; 0x14
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	69 f7       	brne	.-38     	; 0x1368 <getPasswordConfirmation+0xd2>
    138e:	14 c0       	rjmp	.+40     	; 0x13b8 <getPasswordConfirmation+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1390:	6d 89       	ldd	r22, Y+21	; 0x15
    1392:	7e 89       	ldd	r23, Y+22	; 0x16
    1394:	8f 89       	ldd	r24, Y+23	; 0x17
    1396:	98 8d       	ldd	r25, Y+24	; 0x18
    1398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	9c 8b       	std	Y+20, r25	; 0x14
    13a2:	8b 8b       	std	Y+19, r24	; 0x13
    13a4:	8b 89       	ldd	r24, Y+19	; 0x13
    13a6:	9c 89       	ldd	r25, Y+20	; 0x14
    13a8:	98 8b       	std	Y+16, r25	; 0x10
    13aa:	8f 87       	std	Y+15, r24	; 0x0f
    13ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ae:	98 89       	ldd	r25, Y+16	; 0x10
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <getPasswordConfirmation+0x11a>
    13b4:	98 8b       	std	Y+16, r25	; 0x10
    13b6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
		}while(keyPressed > 9);
    13b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13ba:	8a 30       	cpi	r24, 0x0A	; 10
    13bc:	08 f0       	brcs	.+2      	; 0x13c0 <getPasswordConfirmation+0x12a>
    13be:	87 cf       	rjmp	.-242    	; 0x12ce <getPasswordConfirmation+0x38>
		pass[i] = keyPressed;
    13c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13c8:	98 a1       	ldd	r25, Y+32	; 0x20
    13ca:	fc 01       	movw	r30, r24
    13cc:	e2 0f       	add	r30, r18
    13ce:	f3 1f       	adc	r31, r19
    13d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13d2:	80 83       	st	Z, r24

		LCD_intgerToString(pass[i]);
    13d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13dc:	98 a1       	ldd	r25, Y+32	; 0x20
    13de:	fc 01       	movw	r30, r24
    13e0:	e2 0f       	add	r30, r18
    13e2:	f3 1f       	adc	r31, r19
    13e4:	80 81       	ld	r24, Z
    13e6:	88 2f       	mov	r24, r24
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 c6 14 	call	0x298c	; 0x298c <LCD_intgerToString>
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	a8 ec       	ldi	r26, 0xC8	; 200
    13f4:	b2 e4       	ldi	r27, 0x42	; 66
    13f6:	8b 87       	std	Y+11, r24	; 0x0b
    13f8:	9c 87       	std	Y+12, r25	; 0x0c
    13fa:	ad 87       	std	Y+13, r26	; 0x0d
    13fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1400:	7c 85       	ldd	r23, Y+12	; 0x0c
    1402:	8d 85       	ldd	r24, Y+13	; 0x0d
    1404:	9e 85       	ldd	r25, Y+14	; 0x0e
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	4a ef       	ldi	r20, 0xFA	; 250
    140c:	54 e4       	ldi	r21, 0x44	; 68
    140e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	8f 83       	std	Y+7, r24	; 0x07
    1418:	98 87       	std	Y+8, r25	; 0x08
    141a:	a9 87       	std	Y+9, r26	; 0x09
    141c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    141e:	6f 81       	ldd	r22, Y+7	; 0x07
    1420:	78 85       	ldd	r23, Y+8	; 0x08
    1422:	89 85       	ldd	r24, Y+9	; 0x09
    1424:	9a 85       	ldd	r25, Y+10	; 0x0a
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 e8       	ldi	r20, 0x80	; 128
    142c:	5f e3       	ldi	r21, 0x3F	; 63
    142e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1432:	88 23       	and	r24, r24
    1434:	2c f4       	brge	.+10     	; 0x1440 <getPasswordConfirmation+0x1aa>
		__ticks = 1;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	9e 83       	std	Y+6, r25	; 0x06
    143c:	8d 83       	std	Y+5, r24	; 0x05
    143e:	3f c0       	rjmp	.+126    	; 0x14be <getPasswordConfirmation+0x228>
	else if (__tmp > 65535)
    1440:	6f 81       	ldd	r22, Y+7	; 0x07
    1442:	78 85       	ldd	r23, Y+8	; 0x08
    1444:	89 85       	ldd	r24, Y+9	; 0x09
    1446:	9a 85       	ldd	r25, Y+10	; 0x0a
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	3f ef       	ldi	r19, 0xFF	; 255
    144c:	4f e7       	ldi	r20, 0x7F	; 127
    144e:	57 e4       	ldi	r21, 0x47	; 71
    1450:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1454:	18 16       	cp	r1, r24
    1456:	4c f5       	brge	.+82     	; 0x14aa <getPasswordConfirmation+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1458:	6b 85       	ldd	r22, Y+11	; 0x0b
    145a:	7c 85       	ldd	r23, Y+12	; 0x0c
    145c:	8d 85       	ldd	r24, Y+13	; 0x0d
    145e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	40 e2       	ldi	r20, 0x20	; 32
    1466:	51 e4       	ldi	r21, 0x41	; 65
    1468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	bc 01       	movw	r22, r24
    1472:	cd 01       	movw	r24, r26
    1474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	9e 83       	std	Y+6, r25	; 0x06
    147e:	8d 83       	std	Y+5, r24	; 0x05
    1480:	0f c0       	rjmp	.+30     	; 0x14a0 <getPasswordConfirmation+0x20a>
    1482:	88 ec       	ldi	r24, 0xC8	; 200
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	9c 83       	std	Y+4, r25	; 0x04
    1488:	8b 83       	std	Y+3, r24	; 0x03
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	9c 81       	ldd	r25, Y+4	; 0x04
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	f1 f7       	brne	.-4      	; 0x148e <getPasswordConfirmation+0x1f8>
    1492:	9c 83       	std	Y+4, r25	; 0x04
    1494:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	9e 83       	std	Y+6, r25	; 0x06
    149e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a0:	8d 81       	ldd	r24, Y+5	; 0x05
    14a2:	9e 81       	ldd	r25, Y+6	; 0x06
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	69 f7       	brne	.-38     	; 0x1482 <getPasswordConfirmation+0x1ec>
    14a8:	14 c0       	rjmp	.+40     	; 0x14d2 <getPasswordConfirmation+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14aa:	6f 81       	ldd	r22, Y+7	; 0x07
    14ac:	78 85       	ldd	r23, Y+8	; 0x08
    14ae:	89 85       	ldd	r24, Y+9	; 0x09
    14b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	9e 83       	std	Y+6, r25	; 0x06
    14bc:	8d 83       	std	Y+5, r24	; 0x05
    14be:	8d 81       	ldd	r24, Y+5	; 0x05
    14c0:	9e 81       	ldd	r25, Y+6	; 0x06
    14c2:	9a 83       	std	Y+2, r25	; 0x02
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <getPasswordConfirmation+0x234>
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		LCD_moveCursor(1, i);
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    14d6:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
		LCD_displayCharacter('*');
    14da:	8a e2       	ldi	r24, 0x2A	; 42
    14dc:	0e 94 53 12 	call	0x24a6	; 0x24a6 <LCD_displayCharacter>
	LCD_displayString("please, re-enter the same pass:");
	LCD_moveCursor(1, 0);


	/* loop to get the password Confirmation */
	for(i=0;i<5;i++)
    14e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14e2:	8f 5f       	subi	r24, 0xFF	; 255
    14e4:	8d 8f       	std	Y+29, r24	; 0x1d
    14e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14e8:	85 30       	cpi	r24, 0x05	; 5
    14ea:	08 f4       	brcc	.+2      	; 0x14ee <getPasswordConfirmation+0x258>
    14ec:	f0 ce       	rjmp	.-544    	; 0x12ce <getPasswordConfirmation+0x38>

		LCD_intgerToString(pass[i]);
		_delay_ms(100);
		LCD_moveCursor(1, i);
		LCD_displayCharacter('*');
	}while(KEYPAD_getPressedKey() != 13);
    14ee:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <KEYPAD_getPressedKey>
    14f2:	8d 30       	cpi	r24, 0x0D	; 13
    14f4:	e1 f7       	brne	.-8      	; 0x14ee <getPasswordConfirmation+0x258>


}
    14f6:	a0 96       	adiw	r28, 0x20	; 32
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	08 95       	ret

00001508 <checkPasswordIsSame>:
 * ● Description
 *   ⮚ Function to open the door
 * ● Inputs: pass1 ,pass2
 * ● Return: same or not
 *********************************************************************/
uint8 checkPasswordIsSame(uint8* pass1 , uint8*pass2){
    1508:	df 93       	push	r29
    150a:	cf 93       	push	r28
    150c:	00 d0       	rcall	.+0      	; 0x150e <checkPasswordIsSame+0x6>
    150e:	00 d0       	rcall	.+0      	; 0x1510 <checkPasswordIsSame+0x8>
    1510:	00 d0       	rcall	.+0      	; 0x1512 <checkPasswordIsSame+0xa>
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	9b 83       	std	Y+3, r25	; 0x03
    1518:	8a 83       	std	Y+2, r24	; 0x02
    151a:	7d 83       	std	Y+5, r23	; 0x05
    151c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i; /***********counter*********/
	UART_sendByte(CREATE_NEW_PASS);
    151e:	85 e0       	ldi	r24, 0x05	; 5
    1520:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <UART_sendByte>
	for (i=0;i<PASSWORD_SIZE;i++){
    1524:	19 82       	std	Y+1, r1	; 0x01
    1526:	0e c0       	rjmp	.+28     	; 0x1544 <checkPasswordIsSame+0x3c>
		UART_sendByte(pass1[i]);
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	9b 81       	ldd	r25, Y+3	; 0x03
    1532:	fc 01       	movw	r30, r24
    1534:	e2 0f       	add	r30, r18
    1536:	f3 1f       	adc	r31, r19
    1538:	80 81       	ld	r24, Z
    153a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <UART_sendByte>
 * ● Return: same or not
 *********************************************************************/
uint8 checkPasswordIsSame(uint8* pass1 , uint8*pass2){
	uint8 i; /***********counter*********/
	UART_sendByte(CREATE_NEW_PASS);
	for (i=0;i<PASSWORD_SIZE;i++){
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	8f 5f       	subi	r24, 0xFF	; 255
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	85 30       	cpi	r24, 0x05	; 5
    1548:	78 f3       	brcs	.-34     	; 0x1528 <checkPasswordIsSame+0x20>
		UART_sendByte(pass1[i]);
	}
	for (i=0;i<PASSWORD_SIZE;i++){
    154a:	19 82       	std	Y+1, r1	; 0x01
    154c:	0e c0       	rjmp	.+28     	; 0x156a <checkPasswordIsSame+0x62>
		UART_sendByte(pass2[i]);
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	9d 81       	ldd	r25, Y+5	; 0x05
    1558:	fc 01       	movw	r30, r24
    155a:	e2 0f       	add	r30, r18
    155c:	f3 1f       	adc	r31, r19
    155e:	80 81       	ld	r24, Z
    1560:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <UART_sendByte>
	uint8 i; /***********counter*********/
	UART_sendByte(CREATE_NEW_PASS);
	for (i=0;i<PASSWORD_SIZE;i++){
		UART_sendByte(pass1[i]);
	}
	for (i=0;i<PASSWORD_SIZE;i++){
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	8f 5f       	subi	r24, 0xFF	; 255
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	85 30       	cpi	r24, 0x05	; 5
    156e:	78 f3       	brcs	.-34     	; 0x154e <checkPasswordIsSame+0x46>
		UART_sendByte(pass2[i]);
	}
	if (UART_recieveByte()== NEW_PASS_SAVED){
    1570:	0e 94 67 16 	call	0x2cce	; 0x2cce <UART_recieveByte>
    1574:	8a 30       	cpi	r24, 0x0A	; 10
    1576:	19 f4       	brne	.+6      	; 0x157e <checkPasswordIsSame+0x76>
		return PASSWORD_MATCHED ;
    1578:	8b e0       	ldi	r24, 0x0B	; 11
    157a:	8e 83       	std	Y+6, r24	; 0x06
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <checkPasswordIsSame+0x7a>
	}
	else
		return PASSWORD_NOT_MATCHED ;
    157e:	8c e0       	ldi	r24, 0x0C	; 12
    1580:	8e 83       	std	Y+6, r24	; 0x06
    1582:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1584:	26 96       	adiw	r28, 0x06	; 6
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <compare_password>:
 * ● Description
 *   ⮚ Function to receive passord
 * ● Inputs: arr1[] , arr2[]
 * ● Return: TRUE OR FALSE
 *********************************************************************/
uint8  compare_password(uint8* pass1 ,uint8*pass2){
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	27 97       	sbiw	r28, 0x07	; 7
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	9c 83       	std	Y+4, r25	; 0x04
    15ac:	8b 83       	std	Y+3, r24	; 0x03
    15ae:	7e 83       	std	Y+6, r23	; 0x06
    15b0:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i,counter=0;
    15b2:	19 82       	std	Y+1, r1	; 0x01
	for (i=0;i<PASSWORD_SIZE;i++){
    15b4:	1a 82       	std	Y+2, r1	; 0x02
    15b6:	1a c0       	rjmp	.+52     	; 0x15ec <compare_password+0x56>
		if (pass1[i]==pass2[i]){
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	fc 01       	movw	r30, r24
    15c4:	e2 0f       	add	r30, r18
    15c6:	f3 1f       	adc	r31, r19
    15c8:	40 81       	ld	r20, Z
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	8d 81       	ldd	r24, Y+5	; 0x05
    15d2:	9e 81       	ldd	r25, Y+6	; 0x06
    15d4:	fc 01       	movw	r30, r24
    15d6:	e2 0f       	add	r30, r18
    15d8:	f3 1f       	adc	r31, r19
    15da:	80 81       	ld	r24, Z
    15dc:	48 17       	cp	r20, r24
    15de:	19 f4       	brne	.+6      	; 0x15e6 <compare_password+0x50>
			counter++;
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
    15e4:	89 83       	std	Y+1, r24	; 0x01
 * ● Inputs: arr1[] , arr2[]
 * ● Return: TRUE OR FALSE
 *********************************************************************/
uint8  compare_password(uint8* pass1 ,uint8*pass2){
	uint8 i,counter=0;
	for (i=0;i<PASSWORD_SIZE;i++){
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	8f 5f       	subi	r24, 0xFF	; 255
    15ea:	8a 83       	std	Y+2, r24	; 0x02
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	85 30       	cpi	r24, 0x05	; 5
    15f0:	18 f3       	brcs	.-58     	; 0x15b8 <compare_password+0x22>
		if (pass1[i]==pass2[i]){
			counter++;
		}

	}
	if (counter==PASSWORD_SIZE){
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	85 30       	cpi	r24, 0x05	; 5
    15f6:	19 f4       	brne	.+6      	; 0x15fe <compare_password+0x68>
		return TRUE;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	8f 83       	std	Y+7, r24	; 0x07
    15fc:	01 c0       	rjmp	.+2      	; 0x1600 <compare_password+0x6a>
	}
	else
		return FALSE ;
    15fe:	1f 82       	std	Y+7, r1	; 0x07
    1600:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1602:	27 96       	adiw	r28, 0x07	; 7
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <check_password>:

/***************check password ****************/

uint8 check_password (uint8 *pass){
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	00 d0       	rcall	.+0      	; 0x161a <check_password+0x6>
    161a:	00 d0       	rcall	.+0      	; 0x161c <check_password+0x8>
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	9b 83       	std	Y+3, r25	; 0x03
    1622:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    1624:	19 82       	std	Y+1, r1	; 0x01
	UART_sendByte(PASS_CHECK);
    1626:	80 e1       	ldi	r24, 0x10	; 16
    1628:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <UART_sendByte>
	for (i=0;i<PASSWORD_SIZE;i++){
    162c:	19 82       	std	Y+1, r1	; 0x01
    162e:	0e c0       	rjmp	.+28     	; 0x164c <check_password+0x38>
		UART_sendByte(pass[i]);
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	9b 81       	ldd	r25, Y+3	; 0x03
    163a:	fc 01       	movw	r30, r24
    163c:	e2 0f       	add	r30, r18
    163e:	f3 1f       	adc	r31, r19
    1640:	80 81       	ld	r24, Z
    1642:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <UART_sendByte>
/***************check password ****************/

uint8 check_password (uint8 *pass){
	uint8 i=0;
	UART_sendByte(PASS_CHECK);
	for (i=0;i<PASSWORD_SIZE;i++){
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	8f 5f       	subi	r24, 0xFF	; 255
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	85 30       	cpi	r24, 0x05	; 5
    1650:	78 f3       	brcs	.-34     	; 0x1630 <check_password+0x1c>
		UART_sendByte(pass[i]);
	}
	if (UART_recieveByte()==PASS_CORRECT)
    1652:	0e 94 67 16 	call	0x2cce	; 0x2cce <UART_recieveByte>
    1656:	8f 30       	cpi	r24, 0x0F	; 15
    1658:	19 f4       	brne	.+6      	; 0x1660 <check_password+0x4c>
		return TRUE ;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	8c 83       	std	Y+4, r24	; 0x04
    165e:	01 c0       	rjmp	.+2      	; 0x1662 <check_password+0x4e>
	else
		return FALSE;
    1660:	1c 82       	std	Y+4, r1	; 0x04
    1662:	8c 81       	ldd	r24, Y+4	; 0x04


}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <open_door>:
 * ● Description
 *   ⮚ Function to open the door
 * ● Inputs: arr1[] , arr2[]
 * ● Return: None
 *********************************************************************/
void open_door(void){
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(OPEN_DOOR);
    167a:	86 e0       	ldi	r24, 0x06	; 6
    167c:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <UART_sendByte>
	LCD_clearScreen();
    1680:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
	LCD_displayString("DOOR IS UNLOCKING");
    1684:	86 ef       	ldi	r24, 0xF6	; 246
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>

	// _delay_ms(5000);
	delaySeconds(15);
    168c:	8f e0       	ldi	r24, 0x0F	; 15
    168e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <delaySeconds>

	LCD_clearScreen();
    1692:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
	LCD_displayString("DOOR IS OPEN");
    1696:	88 e0       	ldi	r24, 0x08	; 8
    1698:	91 e0       	ldi	r25, 0x01	; 1
    169a:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
	delaySeconds(3);
    169e:	83 e0       	ldi	r24, 0x03	; 3
    16a0:	0e 94 bd 07 	call	0xf7a	; 0xf7a <delaySeconds>
	//_delay_ms(2000);

	LCD_clearScreen();
    16a4:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
	LCD_displayString("DOOR IS LOCKING");
    16a8:	85 e1       	ldi	r24, 0x15	; 21
    16aa:	91 e0       	ldi	r25, 0x01	; 1
    16ac:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
	//_delay_ms(5000);
	delaySeconds(15);
    16b0:	8f e0       	ldi	r24, 0x0F	; 15
    16b2:	0e 94 bd 07 	call	0xf7a	; 0xf7a <delaySeconds>


}
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <ALARM_ONN>:
 * ● Description
 *   ⮚ Function to ONN ALARM
 * ● Inputs: seconds
 * ● Return: None
 *********************************************************************/
void ALARM_ONN(void){
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(ALARM_ON);
    16c4:	84 e0       	ldi	r24, 0x04	; 4
    16c6:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <UART_sendByte>
	LCD_clearScreen();
    16ca:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_clearScreen>
	LCD_displayString("  stealing!! ");
    16ce:	85 e2       	ldi	r24, 0x25	; 37
    16d0:	91 e0       	ldi	r25, 0x01	; 1
    16d2:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
	delaySeconds(60);
    16d6:	8c e3       	ldi	r24, 0x3C	; 60
    16d8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <delaySeconds>

}
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <GPIO_setupPinDirection+0x6>
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <GPIO_setupPinDirection+0x8>
    16ea:	0f 92       	push	r0
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	6a 83       	std	Y+2, r22	; 0x02
    16f4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	88 30       	cpi	r24, 0x08	; 8
    16fa:	08 f0       	brcs	.+2      	; 0x16fe <GPIO_setupPinDirection+0x1c>
    16fc:	d5 c0       	rjmp	.+426    	; 0x18a8 <GPIO_setupPinDirection+0x1c6>
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	84 30       	cpi	r24, 0x04	; 4
    1702:	08 f0       	brcs	.+2      	; 0x1706 <GPIO_setupPinDirection+0x24>
    1704:	d1 c0       	rjmp	.+418    	; 0x18a8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	3d 83       	std	Y+5, r19	; 0x05
    170e:	2c 83       	std	Y+4, r18	; 0x04
    1710:	8c 81       	ldd	r24, Y+4	; 0x04
    1712:	9d 81       	ldd	r25, Y+5	; 0x05
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	91 05       	cpc	r25, r1
    1718:	09 f4       	brne	.+2      	; 0x171c <GPIO_setupPinDirection+0x3a>
    171a:	43 c0       	rjmp	.+134    	; 0x17a2 <GPIO_setupPinDirection+0xc0>
    171c:	2c 81       	ldd	r18, Y+4	; 0x04
    171e:	3d 81       	ldd	r19, Y+5	; 0x05
    1720:	22 30       	cpi	r18, 0x02	; 2
    1722:	31 05       	cpc	r19, r1
    1724:	2c f4       	brge	.+10     	; 0x1730 <GPIO_setupPinDirection+0x4e>
    1726:	8c 81       	ldd	r24, Y+4	; 0x04
    1728:	9d 81       	ldd	r25, Y+5	; 0x05
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	71 f0       	breq	.+28     	; 0x174a <GPIO_setupPinDirection+0x68>
    172e:	bc c0       	rjmp	.+376    	; 0x18a8 <GPIO_setupPinDirection+0x1c6>
    1730:	2c 81       	ldd	r18, Y+4	; 0x04
    1732:	3d 81       	ldd	r19, Y+5	; 0x05
    1734:	22 30       	cpi	r18, 0x02	; 2
    1736:	31 05       	cpc	r19, r1
    1738:	09 f4       	brne	.+2      	; 0x173c <GPIO_setupPinDirection+0x5a>
    173a:	5f c0       	rjmp	.+190    	; 0x17fa <GPIO_setupPinDirection+0x118>
    173c:	8c 81       	ldd	r24, Y+4	; 0x04
    173e:	9d 81       	ldd	r25, Y+5	; 0x05
    1740:	83 30       	cpi	r24, 0x03	; 3
    1742:	91 05       	cpc	r25, r1
    1744:	09 f4       	brne	.+2      	; 0x1748 <GPIO_setupPinDirection+0x66>
    1746:	85 c0       	rjmp	.+266    	; 0x1852 <GPIO_setupPinDirection+0x170>
    1748:	af c0       	rjmp	.+350    	; 0x18a8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	a1 f4       	brne	.+40     	; 0x1778 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1750:	aa e3       	ldi	r26, 0x3A	; 58
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	ea e3       	ldi	r30, 0x3A	; 58
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	48 2f       	mov	r20, r24
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	02 2e       	mov	r0, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <GPIO_setupPinDirection+0x8c>
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	0a 94       	dec	r0
    1770:	e2 f7       	brpl	.-8      	; 0x176a <GPIO_setupPinDirection+0x88>
    1772:	84 2b       	or	r24, r20
    1774:	8c 93       	st	X, r24
    1776:	98 c0       	rjmp	.+304    	; 0x18a8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1778:	aa e3       	ldi	r26, 0x3A	; 58
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	ea e3       	ldi	r30, 0x3A	; 58
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	48 2f       	mov	r20, r24
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	02 2e       	mov	r0, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <GPIO_setupPinDirection+0xb4>
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	0a 94       	dec	r0
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <GPIO_setupPinDirection+0xb0>
    179a:	80 95       	com	r24
    179c:	84 23       	and	r24, r20
    179e:	8c 93       	st	X, r24
    17a0:	83 c0       	rjmp	.+262    	; 0x18a8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	a1 f4       	brne	.+40     	; 0x17d0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    17a8:	a7 e3       	ldi	r26, 0x37	; 55
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e7 e3       	ldi	r30, 0x37	; 55
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 2e       	mov	r0, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <GPIO_setupPinDirection+0xe4>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	0a 94       	dec	r0
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <GPIO_setupPinDirection+0xe0>
    17ca:	84 2b       	or	r24, r20
    17cc:	8c 93       	st	X, r24
    17ce:	6c c0       	rjmp	.+216    	; 0x18a8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    17d0:	a7 e3       	ldi	r26, 0x37	; 55
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e7 e3       	ldi	r30, 0x37	; 55
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <GPIO_setupPinDirection+0x10c>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <GPIO_setupPinDirection+0x108>
    17f2:	80 95       	com	r24
    17f4:	84 23       	and	r24, r20
    17f6:	8c 93       	st	X, r24
    17f8:	57 c0       	rjmp	.+174    	; 0x18a8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	81 30       	cpi	r24, 0x01	; 1
    17fe:	a1 f4       	brne	.+40     	; 0x1828 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1800:	a4 e3       	ldi	r26, 0x34	; 52
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e4 e3       	ldi	r30, 0x34	; 52
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	48 2f       	mov	r20, r24
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	02 2e       	mov	r0, r18
    1818:	02 c0       	rjmp	.+4      	; 0x181e <GPIO_setupPinDirection+0x13c>
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	0a 94       	dec	r0
    1820:	e2 f7       	brpl	.-8      	; 0x181a <GPIO_setupPinDirection+0x138>
    1822:	84 2b       	or	r24, r20
    1824:	8c 93       	st	X, r24
    1826:	40 c0       	rjmp	.+128    	; 0x18a8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1828:	a4 e3       	ldi	r26, 0x34	; 52
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e4 e3       	ldi	r30, 0x34	; 52
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	48 2f       	mov	r20, r24
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 2e       	mov	r0, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <GPIO_setupPinDirection+0x164>
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	0a 94       	dec	r0
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <GPIO_setupPinDirection+0x160>
    184a:	80 95       	com	r24
    184c:	84 23       	and	r24, r20
    184e:	8c 93       	st	X, r24
    1850:	2b c0       	rjmp	.+86     	; 0x18a8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	81 30       	cpi	r24, 0x01	; 1
    1856:	a1 f4       	brne	.+40     	; 0x1880 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1858:	a1 e3       	ldi	r26, 0x31	; 49
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e1 e3       	ldi	r30, 0x31	; 49
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	48 2f       	mov	r20, r24
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 2e       	mov	r0, r18
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <GPIO_setupPinDirection+0x194>
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	0a 94       	dec	r0
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <GPIO_setupPinDirection+0x190>
    187a:	84 2b       	or	r24, r20
    187c:	8c 93       	st	X, r24
    187e:	14 c0       	rjmp	.+40     	; 0x18a8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1880:	a1 e3       	ldi	r26, 0x31	; 49
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e1 e3       	ldi	r30, 0x31	; 49
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 2e       	mov	r0, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <GPIO_setupPinDirection+0x1bc>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <GPIO_setupPinDirection+0x1b8>
    18a2:	80 95       	com	r24
    18a4:	84 23       	and	r24, r20
    18a6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	cf 91       	pop	r28
    18b4:	df 91       	pop	r29
    18b6:	08 95       	ret

000018b8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	00 d0       	rcall	.+0      	; 0x18be <GPIO_writePin+0x6>
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <GPIO_writePin+0x8>
    18c0:	0f 92       	push	r0
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	89 83       	std	Y+1, r24	; 0x01
    18c8:	6a 83       	std	Y+2, r22	; 0x02
    18ca:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	88 30       	cpi	r24, 0x08	; 8
    18d0:	08 f0       	brcs	.+2      	; 0x18d4 <GPIO_writePin+0x1c>
    18d2:	d5 c0       	rjmp	.+426    	; 0x1a7e <GPIO_writePin+0x1c6>
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	84 30       	cpi	r24, 0x04	; 4
    18d8:	08 f0       	brcs	.+2      	; 0x18dc <GPIO_writePin+0x24>
    18da:	d1 c0       	rjmp	.+418    	; 0x1a7e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	3d 83       	std	Y+5, r19	; 0x05
    18e4:	2c 83       	std	Y+4, r18	; 0x04
    18e6:	8c 81       	ldd	r24, Y+4	; 0x04
    18e8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ea:	81 30       	cpi	r24, 0x01	; 1
    18ec:	91 05       	cpc	r25, r1
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <GPIO_writePin+0x3a>
    18f0:	43 c0       	rjmp	.+134    	; 0x1978 <GPIO_writePin+0xc0>
    18f2:	2c 81       	ldd	r18, Y+4	; 0x04
    18f4:	3d 81       	ldd	r19, Y+5	; 0x05
    18f6:	22 30       	cpi	r18, 0x02	; 2
    18f8:	31 05       	cpc	r19, r1
    18fa:	2c f4       	brge	.+10     	; 0x1906 <GPIO_writePin+0x4e>
    18fc:	8c 81       	ldd	r24, Y+4	; 0x04
    18fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	71 f0       	breq	.+28     	; 0x1920 <GPIO_writePin+0x68>
    1904:	bc c0       	rjmp	.+376    	; 0x1a7e <GPIO_writePin+0x1c6>
    1906:	2c 81       	ldd	r18, Y+4	; 0x04
    1908:	3d 81       	ldd	r19, Y+5	; 0x05
    190a:	22 30       	cpi	r18, 0x02	; 2
    190c:	31 05       	cpc	r19, r1
    190e:	09 f4       	brne	.+2      	; 0x1912 <GPIO_writePin+0x5a>
    1910:	5f c0       	rjmp	.+190    	; 0x19d0 <GPIO_writePin+0x118>
    1912:	8c 81       	ldd	r24, Y+4	; 0x04
    1914:	9d 81       	ldd	r25, Y+5	; 0x05
    1916:	83 30       	cpi	r24, 0x03	; 3
    1918:	91 05       	cpc	r25, r1
    191a:	09 f4       	brne	.+2      	; 0x191e <GPIO_writePin+0x66>
    191c:	85 c0       	rjmp	.+266    	; 0x1a28 <GPIO_writePin+0x170>
    191e:	af c0       	rjmp	.+350    	; 0x1a7e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	81 30       	cpi	r24, 0x01	; 1
    1924:	a1 f4       	brne	.+40     	; 0x194e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1926:	ab e3       	ldi	r26, 0x3B	; 59
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	eb e3       	ldi	r30, 0x3B	; 59
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	48 2f       	mov	r20, r24
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	02 2e       	mov	r0, r18
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <GPIO_writePin+0x8c>
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	0a 94       	dec	r0
    1946:	e2 f7       	brpl	.-8      	; 0x1940 <GPIO_writePin+0x88>
    1948:	84 2b       	or	r24, r20
    194a:	8c 93       	st	X, r24
    194c:	98 c0       	rjmp	.+304    	; 0x1a7e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    194e:	ab e3       	ldi	r26, 0x3B	; 59
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	eb e3       	ldi	r30, 0x3B	; 59
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	48 2f       	mov	r20, r24
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	02 2e       	mov	r0, r18
    1966:	02 c0       	rjmp	.+4      	; 0x196c <GPIO_writePin+0xb4>
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	0a 94       	dec	r0
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <GPIO_writePin+0xb0>
    1970:	80 95       	com	r24
    1972:	84 23       	and	r24, r20
    1974:	8c 93       	st	X, r24
    1976:	83 c0       	rjmp	.+262    	; 0x1a7e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	a1 f4       	brne	.+40     	; 0x19a6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    197e:	a8 e3       	ldi	r26, 0x38	; 56
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e8 e3       	ldi	r30, 0x38	; 56
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	48 2f       	mov	r20, r24
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	02 2e       	mov	r0, r18
    1996:	02 c0       	rjmp	.+4      	; 0x199c <GPIO_writePin+0xe4>
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	0a 94       	dec	r0
    199e:	e2 f7       	brpl	.-8      	; 0x1998 <GPIO_writePin+0xe0>
    19a0:	84 2b       	or	r24, r20
    19a2:	8c 93       	st	X, r24
    19a4:	6c c0       	rjmp	.+216    	; 0x1a7e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    19a6:	a8 e3       	ldi	r26, 0x38	; 56
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e8 e3       	ldi	r30, 0x38	; 56
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	48 2f       	mov	r20, r24
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	02 2e       	mov	r0, r18
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <GPIO_writePin+0x10c>
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	0a 94       	dec	r0
    19c6:	e2 f7       	brpl	.-8      	; 0x19c0 <GPIO_writePin+0x108>
    19c8:	80 95       	com	r24
    19ca:	84 23       	and	r24, r20
    19cc:	8c 93       	st	X, r24
    19ce:	57 c0       	rjmp	.+174    	; 0x1a7e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	81 30       	cpi	r24, 0x01	; 1
    19d4:	a1 f4       	brne	.+40     	; 0x19fe <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    19d6:	a5 e3       	ldi	r26, 0x35	; 53
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e5 e3       	ldi	r30, 0x35	; 53
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	48 2f       	mov	r20, r24
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	02 2e       	mov	r0, r18
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <GPIO_writePin+0x13c>
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	0a 94       	dec	r0
    19f6:	e2 f7       	brpl	.-8      	; 0x19f0 <GPIO_writePin+0x138>
    19f8:	84 2b       	or	r24, r20
    19fa:	8c 93       	st	X, r24
    19fc:	40 c0       	rjmp	.+128    	; 0x1a7e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    19fe:	a5 e3       	ldi	r26, 0x35	; 53
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e5 e3       	ldi	r30, 0x35	; 53
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	48 2f       	mov	r20, r24
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	02 2e       	mov	r0, r18
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <GPIO_writePin+0x164>
    1a18:	88 0f       	add	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	0a 94       	dec	r0
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <GPIO_writePin+0x160>
    1a20:	80 95       	com	r24
    1a22:	84 23       	and	r24, r20
    1a24:	8c 93       	st	X, r24
    1a26:	2b c0       	rjmp	.+86     	; 0x1a7e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	81 30       	cpi	r24, 0x01	; 1
    1a2c:	a1 f4       	brne	.+40     	; 0x1a56 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1a2e:	a2 e3       	ldi	r26, 0x32	; 50
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e2 e3       	ldi	r30, 0x32	; 50
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	48 2f       	mov	r20, r24
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	02 2e       	mov	r0, r18
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <GPIO_writePin+0x194>
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	0a 94       	dec	r0
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <GPIO_writePin+0x190>
    1a50:	84 2b       	or	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	14 c0       	rjmp	.+40     	; 0x1a7e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1a56:	a2 e3       	ldi	r26, 0x32	; 50
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e2 e3       	ldi	r30, 0x32	; 50
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	48 2f       	mov	r20, r24
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 2e       	mov	r0, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <GPIO_writePin+0x1bc>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	0a 94       	dec	r0
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <GPIO_writePin+0x1b8>
    1a78:	80 95       	com	r24
    1a7a:	84 23       	and	r24, r20
    1a7c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	00 d0       	rcall	.+0      	; 0x1a94 <GPIO_readPin+0x6>
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <GPIO_readPin+0x8>
    1a96:	0f 92       	push	r0
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	8a 83       	std	Y+2, r24	; 0x02
    1a9e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1aa0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	88 30       	cpi	r24, 0x08	; 8
    1aa6:	08 f0       	brcs	.+2      	; 0x1aaa <GPIO_readPin+0x1c>
    1aa8:	84 c0       	rjmp	.+264    	; 0x1bb2 <GPIO_readPin+0x124>
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	84 30       	cpi	r24, 0x04	; 4
    1aae:	08 f0       	brcs	.+2      	; 0x1ab2 <GPIO_readPin+0x24>
    1ab0:	80 c0       	rjmp	.+256    	; 0x1bb2 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	3d 83       	std	Y+5, r19	; 0x05
    1aba:	2c 83       	std	Y+4, r18	; 0x04
    1abc:	4c 81       	ldd	r20, Y+4	; 0x04
    1abe:	5d 81       	ldd	r21, Y+5	; 0x05
    1ac0:	41 30       	cpi	r20, 0x01	; 1
    1ac2:	51 05       	cpc	r21, r1
    1ac4:	79 f1       	breq	.+94     	; 0x1b24 <GPIO_readPin+0x96>
    1ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aca:	82 30       	cpi	r24, 0x02	; 2
    1acc:	91 05       	cpc	r25, r1
    1ace:	34 f4       	brge	.+12     	; 0x1adc <GPIO_readPin+0x4e>
    1ad0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad4:	21 15       	cp	r18, r1
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	69 f0       	breq	.+26     	; 0x1af4 <GPIO_readPin+0x66>
    1ada:	6b c0       	rjmp	.+214    	; 0x1bb2 <GPIO_readPin+0x124>
    1adc:	4c 81       	ldd	r20, Y+4	; 0x04
    1ade:	5d 81       	ldd	r21, Y+5	; 0x05
    1ae0:	42 30       	cpi	r20, 0x02	; 2
    1ae2:	51 05       	cpc	r21, r1
    1ae4:	b9 f1       	breq	.+110    	; 0x1b54 <GPIO_readPin+0xc6>
    1ae6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aea:	83 30       	cpi	r24, 0x03	; 3
    1aec:	91 05       	cpc	r25, r1
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <GPIO_readPin+0x64>
    1af0:	49 c0       	rjmp	.+146    	; 0x1b84 <GPIO_readPin+0xf6>
    1af2:	5f c0       	rjmp	.+190    	; 0x1bb2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1af4:	e9 e3       	ldi	r30, 0x39	; 57
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	88 2f       	mov	r24, r24
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a9 01       	movw	r20, r18
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <GPIO_readPin+0x7e>
    1b08:	55 95       	asr	r21
    1b0a:	47 95       	ror	r20
    1b0c:	8a 95       	dec	r24
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <GPIO_readPin+0x7a>
    1b10:	ca 01       	movw	r24, r20
    1b12:	81 70       	andi	r24, 0x01	; 1
    1b14:	90 70       	andi	r25, 0x00	; 0
    1b16:	88 23       	and	r24, r24
    1b18:	19 f0       	breq	.+6      	; 0x1b20 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	49 c0       	rjmp	.+146    	; 0x1bb2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b20:	19 82       	std	Y+1, r1	; 0x01
    1b22:	47 c0       	rjmp	.+142    	; 0x1bb2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1b24:	e6 e3       	ldi	r30, 0x36	; 54
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	88 2f       	mov	r24, r24
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	a9 01       	movw	r20, r18
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <GPIO_readPin+0xae>
    1b38:	55 95       	asr	r21
    1b3a:	47 95       	ror	r20
    1b3c:	8a 95       	dec	r24
    1b3e:	e2 f7       	brpl	.-8      	; 0x1b38 <GPIO_readPin+0xaa>
    1b40:	ca 01       	movw	r24, r20
    1b42:	81 70       	andi	r24, 0x01	; 1
    1b44:	90 70       	andi	r25, 0x00	; 0
    1b46:	88 23       	and	r24, r24
    1b48:	19 f0       	breq	.+6      	; 0x1b50 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	31 c0       	rjmp	.+98     	; 0x1bb2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b50:	19 82       	std	Y+1, r1	; 0x01
    1b52:	2f c0       	rjmp	.+94     	; 0x1bb2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1b54:	e3 e3       	ldi	r30, 0x33	; 51
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	88 2f       	mov	r24, r24
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	a9 01       	movw	r20, r18
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <GPIO_readPin+0xde>
    1b68:	55 95       	asr	r21
    1b6a:	47 95       	ror	r20
    1b6c:	8a 95       	dec	r24
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <GPIO_readPin+0xda>
    1b70:	ca 01       	movw	r24, r20
    1b72:	81 70       	andi	r24, 0x01	; 1
    1b74:	90 70       	andi	r25, 0x00	; 0
    1b76:	88 23       	and	r24, r24
    1b78:	19 f0       	breq	.+6      	; 0x1b80 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	19 c0       	rjmp	.+50     	; 0x1bb2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b80:	19 82       	std	Y+1, r1	; 0x01
    1b82:	17 c0       	rjmp	.+46     	; 0x1bb2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b84:	e0 e3       	ldi	r30, 0x30	; 48
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	88 2f       	mov	r24, r24
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a9 01       	movw	r20, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <GPIO_readPin+0x10e>
    1b98:	55 95       	asr	r21
    1b9a:	47 95       	ror	r20
    1b9c:	8a 95       	dec	r24
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <GPIO_readPin+0x10a>
    1ba0:	ca 01       	movw	r24, r20
    1ba2:	81 70       	andi	r24, 0x01	; 1
    1ba4:	90 70       	andi	r25, 0x00	; 0
    1ba6:	88 23       	and	r24, r24
    1ba8:	19 f0       	breq	.+6      	; 0x1bb0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	89 83       	std	Y+1, r24	; 0x01
    1bae:	01 c0       	rjmp	.+2      	; 0x1bb2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bb0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <GPIO_setupPortDirection+0x6>
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <GPIO_setupPortDirection+0x8>
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    1bd2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	84 30       	cpi	r24, 0x04	; 4
    1bd8:	90 f5       	brcc	.+100    	; 0x1c3e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	28 2f       	mov	r18, r24
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	3c 83       	std	Y+4, r19	; 0x04
    1be2:	2b 83       	std	Y+3, r18	; 0x03
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	9c 81       	ldd	r25, Y+4	; 0x04
    1be8:	81 30       	cpi	r24, 0x01	; 1
    1bea:	91 05       	cpc	r25, r1
    1bec:	d1 f0       	breq	.+52     	; 0x1c22 <GPIO_setupPortDirection+0x5e>
    1bee:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf2:	22 30       	cpi	r18, 0x02	; 2
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	2c f4       	brge	.+10     	; 0x1c02 <GPIO_setupPortDirection+0x3e>
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	61 f0       	breq	.+24     	; 0x1c18 <GPIO_setupPortDirection+0x54>
    1c00:	1e c0       	rjmp	.+60     	; 0x1c3e <GPIO_setupPortDirection+0x7a>
    1c02:	2b 81       	ldd	r18, Y+3	; 0x03
    1c04:	3c 81       	ldd	r19, Y+4	; 0x04
    1c06:	22 30       	cpi	r18, 0x02	; 2
    1c08:	31 05       	cpc	r19, r1
    1c0a:	81 f0       	breq	.+32     	; 0x1c2c <GPIO_setupPortDirection+0x68>
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c10:	83 30       	cpi	r24, 0x03	; 3
    1c12:	91 05       	cpc	r25, r1
    1c14:	81 f0       	breq	.+32     	; 0x1c36 <GPIO_setupPortDirection+0x72>
    1c16:	13 c0       	rjmp	.+38     	; 0x1c3e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1c18:	ea e3       	ldi	r30, 0x3A	; 58
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	80 83       	st	Z, r24
    1c20:	0e c0       	rjmp	.+28     	; 0x1c3e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1c22:	e7 e3       	ldi	r30, 0x37	; 55
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	80 83       	st	Z, r24
    1c2a:	09 c0       	rjmp	.+18     	; 0x1c3e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1c2c:	e4 e3       	ldi	r30, 0x34	; 52
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	80 83       	st	Z, r24
    1c34:	04 c0       	rjmp	.+8      	; 0x1c3e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1c36:	e1 e3       	ldi	r30, 0x31	; 49
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <GPIO_writePort+0x6>
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <GPIO_writePort+0x8>
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	89 83       	std	Y+1, r24	; 0x01
    1c5a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	84 30       	cpi	r24, 0x04	; 4
    1c60:	90 f5       	brcc	.+100    	; 0x1cc6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	3c 83       	std	Y+4, r19	; 0x04
    1c6a:	2b 83       	std	Y+3, r18	; 0x03
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c70:	81 30       	cpi	r24, 0x01	; 1
    1c72:	91 05       	cpc	r25, r1
    1c74:	d1 f0       	breq	.+52     	; 0x1caa <GPIO_writePort+0x5e>
    1c76:	2b 81       	ldd	r18, Y+3	; 0x03
    1c78:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7a:	22 30       	cpi	r18, 0x02	; 2
    1c7c:	31 05       	cpc	r19, r1
    1c7e:	2c f4       	brge	.+10     	; 0x1c8a <GPIO_writePort+0x3e>
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	9c 81       	ldd	r25, Y+4	; 0x04
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	61 f0       	breq	.+24     	; 0x1ca0 <GPIO_writePort+0x54>
    1c88:	1e c0       	rjmp	.+60     	; 0x1cc6 <GPIO_writePort+0x7a>
    1c8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c8e:	22 30       	cpi	r18, 0x02	; 2
    1c90:	31 05       	cpc	r19, r1
    1c92:	81 f0       	breq	.+32     	; 0x1cb4 <GPIO_writePort+0x68>
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	9c 81       	ldd	r25, Y+4	; 0x04
    1c98:	83 30       	cpi	r24, 0x03	; 3
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	81 f0       	breq	.+32     	; 0x1cbe <GPIO_writePort+0x72>
    1c9e:	13 c0       	rjmp	.+38     	; 0x1cc6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1ca0:	eb e3       	ldi	r30, 0x3B	; 59
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	80 83       	st	Z, r24
    1ca8:	0e c0       	rjmp	.+28     	; 0x1cc6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1caa:	e8 e3       	ldi	r30, 0x38	; 56
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	80 83       	st	Z, r24
    1cb2:	09 c0       	rjmp	.+18     	; 0x1cc6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1cb4:	e5 e3       	ldi	r30, 0x35	; 53
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	80 83       	st	Z, r24
    1cbc:	04 c0       	rjmp	.+8      	; 0x1cc6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1cbe:	e2 e3       	ldi	r30, 0x32	; 50
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <GPIO_readPort+0x6>
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <GPIO_readPort+0x8>
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1ce2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	84 30       	cpi	r24, 0x04	; 4
    1ce8:	90 f5       	brcc	.+100    	; 0x1d4e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	3c 83       	std	Y+4, r19	; 0x04
    1cf2:	2b 83       	std	Y+3, r18	; 0x03
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	d1 f0       	breq	.+52     	; 0x1d32 <GPIO_readPort+0x5e>
    1cfe:	2b 81       	ldd	r18, Y+3	; 0x03
    1d00:	3c 81       	ldd	r19, Y+4	; 0x04
    1d02:	22 30       	cpi	r18, 0x02	; 2
    1d04:	31 05       	cpc	r19, r1
    1d06:	2c f4       	brge	.+10     	; 0x1d12 <GPIO_readPort+0x3e>
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	61 f0       	breq	.+24     	; 0x1d28 <GPIO_readPort+0x54>
    1d10:	1e c0       	rjmp	.+60     	; 0x1d4e <GPIO_readPort+0x7a>
    1d12:	2b 81       	ldd	r18, Y+3	; 0x03
    1d14:	3c 81       	ldd	r19, Y+4	; 0x04
    1d16:	22 30       	cpi	r18, 0x02	; 2
    1d18:	31 05       	cpc	r19, r1
    1d1a:	81 f0       	breq	.+32     	; 0x1d3c <GPIO_readPort+0x68>
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d20:	83 30       	cpi	r24, 0x03	; 3
    1d22:	91 05       	cpc	r25, r1
    1d24:	81 f0       	breq	.+32     	; 0x1d46 <GPIO_readPort+0x72>
    1d26:	13 c0       	rjmp	.+38     	; 0x1d4e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1d28:	e9 e3       	ldi	r30, 0x39	; 57
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	0e c0       	rjmp	.+28     	; 0x1d4e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1d32:	e6 e3       	ldi	r30, 0x36	; 54
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	09 c0       	rjmp	.+18     	; 0x1d4e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1d3c:	e3 e3       	ldi	r30, 0x33	; 51
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	04 c0       	rjmp	.+8      	; 0x1d4e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1d46:	e0 e3       	ldi	r30, 0x30	; 48
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <KEYPAD_getPressedKey+0x6>
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	61 e0       	ldi	r22, 0x01	; 1
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	62 e0       	ldi	r22, 0x02	; 2
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	63 e0       	ldi	r22, 0x03	; 3
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	64 e0       	ldi	r22, 0x04	; 4
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	65 e0       	ldi	r22, 0x05	; 5
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	66 e0       	ldi	r22, 0x06	; 6
    1da8:	40 e0       	ldi	r20, 0x00	; 0
    1daa:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	67 e0       	ldi	r22, 0x07	; 7
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1db8:	19 82       	std	Y+1, r1	; 0x01
    1dba:	35 c0       	rjmp	.+106    	; 0x1e26 <KEYPAD_getPressedKey+0xc8>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	69 81       	ldd	r22, Y+1	; 0x01
    1dc0:	41 e0       	ldi	r20, 0x01	; 1
    1dc2:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	69 81       	ldd	r22, Y+1	; 0x01
    1dca:	40 e0       	ldi	r20, 0x00	; 0
    1dcc:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1dd0:	1a 82       	std	Y+2, r1	; 0x02
    1dd2:	1e c0       	rjmp	.+60     	; 0x1e10 <KEYPAD_getPressedKey+0xb2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	98 2f       	mov	r25, r24
    1dd8:	9c 5f       	subi	r25, 0xFC	; 252
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	69 2f       	mov	r22, r25
    1dde:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <GPIO_readPin>
    1de2:	88 23       	and	r24, r24
    1de4:	91 f4       	brne	.+36     	; 0x1e0a <KEYPAD_getPressedKey+0xac>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	88 2f       	mov	r24, r24
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	98 2f       	mov	r25, r24
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	89 0f       	add	r24, r25
    1dfa:	8f 5f       	subi	r24, 0xFF	; 255
    1dfc:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	8f 5f       	subi	r24, 0xFF	; 255
    1e0e:	8a 83       	std	Y+2, r24	; 0x02
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	84 30       	cpi	r24, 0x04	; 4
    1e14:	f8 f2       	brcs	.-66     	; 0x1dd4 <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	69 81       	ldd	r22, Y+1	; 0x01
    1e1a:	40 e0       	ldi	r20, 0x00	; 0
    1e1c:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	8f 5f       	subi	r24, 0xFF	; 255
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	84 30       	cpi	r24, 0x04	; 4
    1e2a:	40 f2       	brcs	.-112    	; 0x1dbc <KEYPAD_getPressedKey+0x5e>
    1e2c:	c5 cf       	rjmp	.-118    	; 0x1db8 <KEYPAD_getPressedKey+0x5a>

00001e2e <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1e3c:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	3c 83       	std	Y+4, r19	; 0x04
    1e46:	2b 83       	std	Y+3, r18	; 0x03
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4c:	88 30       	cpi	r24, 0x08	; 8
    1e4e:	91 05       	cpc	r25, r1
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1e52:	70 c0       	rjmp	.+224    	; 0x1f34 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1e54:	2b 81       	ldd	r18, Y+3	; 0x03
    1e56:	3c 81       	ldd	r19, Y+4	; 0x04
    1e58:	29 30       	cpi	r18, 0x09	; 9
    1e5a:	31 05       	cpc	r19, r1
    1e5c:	5c f5       	brge	.+86     	; 0x1eb4 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	9c 81       	ldd	r25, Y+4	; 0x04
    1e62:	84 30       	cpi	r24, 0x04	; 4
    1e64:	91 05       	cpc	r25, r1
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1e68:	59 c0       	rjmp	.+178    	; 0x1f1c <KEYPAD_4x4_adjustKeyNumber+0xee>
    1e6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6e:	25 30       	cpi	r18, 0x05	; 5
    1e70:	31 05       	cpc	r19, r1
    1e72:	9c f4       	brge	.+38     	; 0x1e9a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	9c 81       	ldd	r25, Y+4	; 0x04
    1e78:	82 30       	cpi	r24, 0x02	; 2
    1e7a:	91 05       	cpc	r25, r1
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1e7e:	48 c0       	rjmp	.+144    	; 0x1f10 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1e80:	2b 81       	ldd	r18, Y+3	; 0x03
    1e82:	3c 81       	ldd	r19, Y+4	; 0x04
    1e84:	23 30       	cpi	r18, 0x03	; 3
    1e86:	31 05       	cpc	r19, r1
    1e88:	0c f0       	brlt	.+2      	; 0x1e8c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1e8a:	45 c0       	rjmp	.+138    	; 0x1f16 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	91 05       	cpc	r25, r1
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1e96:	39 c0       	rjmp	.+114    	; 0x1f0a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1e98:	67 c0       	rjmp	.+206    	; 0x1f68 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1e9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9e:	26 30       	cpi	r18, 0x06	; 6
    1ea0:	31 05       	cpc	r19, r1
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1ea4:	41 c0       	rjmp	.+130    	; 0x1f28 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eaa:	87 30       	cpi	r24, 0x07	; 7
    1eac:	91 05       	cpc	r25, r1
    1eae:	0c f0       	brlt	.+2      	; 0x1eb2 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1eb0:	3e c0       	rjmp	.+124    	; 0x1f2e <KEYPAD_4x4_adjustKeyNumber+0x100>
    1eb2:	37 c0       	rjmp	.+110    	; 0x1f22 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1eb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb8:	2c 30       	cpi	r18, 0x0C	; 12
    1eba:	31 05       	cpc	r19, r1
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1ebe:	46 c0       	rjmp	.+140    	; 0x1f4c <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec4:	8d 30       	cpi	r24, 0x0D	; 13
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	5c f4       	brge	.+22     	; 0x1ee0 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1eca:	2b 81       	ldd	r18, Y+3	; 0x03
    1ecc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ece:	2a 30       	cpi	r18, 0x0A	; 10
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	b1 f1       	breq	.+108    	; 0x1f40 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed8:	8b 30       	cpi	r24, 0x0B	; 11
    1eda:	91 05       	cpc	r25, r1
    1edc:	a4 f5       	brge	.+104    	; 0x1f46 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1ede:	2d c0       	rjmp	.+90     	; 0x1f3a <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1ee0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee4:	2e 30       	cpi	r18, 0x0E	; 14
    1ee6:	31 05       	cpc	r19, r1
    1ee8:	b9 f1       	breq	.+110    	; 0x1f58 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	9c 81       	ldd	r25, Y+4	; 0x04
    1eee:	8e 30       	cpi	r24, 0x0E	; 14
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	7c f1       	brlt	.+94     	; 0x1f52 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1ef4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef8:	2f 30       	cpi	r18, 0x0F	; 15
    1efa:	31 05       	cpc	r19, r1
    1efc:	79 f1       	breq	.+94     	; 0x1f5c <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	9c 81       	ldd	r25, Y+4	; 0x04
    1f02:	80 31       	cpi	r24, 0x10	; 16
    1f04:	91 05       	cpc	r25, r1
    1f06:	69 f1       	breq	.+90     	; 0x1f62 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1f08:	2f c0       	rjmp	.+94     	; 0x1f68 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1f0a:	87 e0       	ldi	r24, 0x07	; 7
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	2e c0       	rjmp	.+92     	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1f10:	88 e0       	ldi	r24, 0x08	; 8
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	2b c0       	rjmp	.+86     	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1f16:	89 e0       	ldi	r24, 0x09	; 9
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	28 c0       	rjmp	.+80     	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1f1c:	85 e2       	ldi	r24, 0x25	; 37
    1f1e:	89 83       	std	Y+1, r24	; 0x01
    1f20:	25 c0       	rjmp	.+74     	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1f22:	84 e0       	ldi	r24, 0x04	; 4
    1f24:	89 83       	std	Y+1, r24	; 0x01
    1f26:	22 c0       	rjmp	.+68     	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1f28:	85 e0       	ldi	r24, 0x05	; 5
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    1f2c:	1f c0       	rjmp	.+62     	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1f2e:	86 e0       	ldi	r24, 0x06	; 6
    1f30:	89 83       	std	Y+1, r24	; 0x01
    1f32:	1c c0       	rjmp	.+56     	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1f34:	8a e2       	ldi	r24, 0x2A	; 42
    1f36:	89 83       	std	Y+1, r24	; 0x01
    1f38:	19 c0       	rjmp	.+50     	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	89 83       	std	Y+1, r24	; 0x01
    1f3e:	16 c0       	rjmp	.+44     	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1f40:	82 e0       	ldi	r24, 0x02	; 2
    1f42:	89 83       	std	Y+1, r24	; 0x01
    1f44:	13 c0       	rjmp	.+38     	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1f46:	83 e0       	ldi	r24, 0x03	; 3
    1f48:	89 83       	std	Y+1, r24	; 0x01
    1f4a:	10 c0       	rjmp	.+32     	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1f4c:	8d e2       	ldi	r24, 0x2D	; 45
    1f4e:	89 83       	std	Y+1, r24	; 0x01
    1f50:	0d c0       	rjmp	.+26     	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1f52:	8d e0       	ldi	r24, 0x0D	; 13
    1f54:	89 83       	std	Y+1, r24	; 0x01
    1f56:	0a c0       	rjmp	.+20     	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1f58:	19 82       	std	Y+1, r1	; 0x01
    1f5a:	08 c0       	rjmp	.+16     	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1f5c:	8d e3       	ldi	r24, 0x3D	; 61
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	05 c0       	rjmp	.+10     	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1f62:	8b e2       	ldi	r24, 0x2B	; 43
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	2e 97       	sbiw	r28, 0x0e	; 14
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1f90:	83 e0       	ldi	r24, 0x03	; 3
    1f92:	65 e0       	ldi	r22, 0x05	; 5
    1f94:	41 e0       	ldi	r20, 0x01	; 1
    1f96:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <GPIO_setupPinDirection>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW);
    1f9a:	83 e0       	ldi	r24, 0x03	; 3
    1f9c:	65 e0       	ldi	r22, 0x05	; 5
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <GPIO_writePin>
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1fa4:	82 e0       	ldi	r24, 0x02	; 2
    1fa6:	64 e0       	ldi	r22, 0x04	; 4
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1fae:	82 e0       	ldi	r24, 0x02	; 2
    1fb0:	63 e0       	ldi	r22, 0x03	; 3
    1fb2:	41 e0       	ldi	r20, 0x01	; 1
    1fb4:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <GPIO_setupPinDirection>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	a0 ea       	ldi	r26, 0xA0	; 160
    1fbe:	b1 e4       	ldi	r27, 0x41	; 65
    1fc0:	8b 87       	std	Y+11, r24	; 0x0b
    1fc2:	9c 87       	std	Y+12, r25	; 0x0c
    1fc4:	ad 87       	std	Y+13, r26	; 0x0d
    1fc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	4a ef       	ldi	r20, 0xFA	; 250
    1fd6:	54 e4       	ldi	r21, 0x44	; 68
    1fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	8f 83       	std	Y+7, r24	; 0x07
    1fe2:	98 87       	std	Y+8, r25	; 0x08
    1fe4:	a9 87       	std	Y+9, r26	; 0x09
    1fe6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fea:	78 85       	ldd	r23, Y+8	; 0x08
    1fec:	89 85       	ldd	r24, Y+9	; 0x09
    1fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e8       	ldi	r20, 0x80	; 128
    1ff6:	5f e3       	ldi	r21, 0x3F	; 63
    1ff8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ffc:	88 23       	and	r24, r24
    1ffe:	2c f4       	brge	.+10     	; 0x200a <LCD_init+0x8e>
		__ticks = 1;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	9e 83       	std	Y+6, r25	; 0x06
    2006:	8d 83       	std	Y+5, r24	; 0x05
    2008:	3f c0       	rjmp	.+126    	; 0x2088 <LCD_init+0x10c>
	else if (__tmp > 65535)
    200a:	6f 81       	ldd	r22, Y+7	; 0x07
    200c:	78 85       	ldd	r23, Y+8	; 0x08
    200e:	89 85       	ldd	r24, Y+9	; 0x09
    2010:	9a 85       	ldd	r25, Y+10	; 0x0a
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	3f ef       	ldi	r19, 0xFF	; 255
    2016:	4f e7       	ldi	r20, 0x7F	; 127
    2018:	57 e4       	ldi	r21, 0x47	; 71
    201a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    201e:	18 16       	cp	r1, r24
    2020:	4c f5       	brge	.+82     	; 0x2074 <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2022:	6b 85       	ldd	r22, Y+11	; 0x0b
    2024:	7c 85       	ldd	r23, Y+12	; 0x0c
    2026:	8d 85       	ldd	r24, Y+13	; 0x0d
    2028:	9e 85       	ldd	r25, Y+14	; 0x0e
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e2       	ldi	r20, 0x20	; 32
    2030:	51 e4       	ldi	r21, 0x41	; 65
    2032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	bc 01       	movw	r22, r24
    203c:	cd 01       	movw	r24, r26
    203e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	9e 83       	std	Y+6, r25	; 0x06
    2048:	8d 83       	std	Y+5, r24	; 0x05
    204a:	0f c0       	rjmp	.+30     	; 0x206a <LCD_init+0xee>
    204c:	88 ec       	ldi	r24, 0xC8	; 200
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	9c 83       	std	Y+4, r25	; 0x04
    2052:	8b 83       	std	Y+3, r24	; 0x03
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	9c 81       	ldd	r25, Y+4	; 0x04
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <LCD_init+0xdc>
    205c:	9c 83       	std	Y+4, r25	; 0x04
    205e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	9e 81       	ldd	r25, Y+6	; 0x06
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	9e 83       	std	Y+6, r25	; 0x06
    2068:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	69 f7       	brne	.-38     	; 0x204c <LCD_init+0xd0>
    2072:	14 c0       	rjmp	.+40     	; 0x209c <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2074:	6f 81       	ldd	r22, Y+7	; 0x07
    2076:	78 85       	ldd	r23, Y+8	; 0x08
    2078:	89 85       	ldd	r24, Y+9	; 0x09
    207a:	9a 85       	ldd	r25, Y+10	; 0x0a
    207c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	9e 83       	std	Y+6, r25	; 0x06
    2086:	8d 83       	std	Y+5, r24	; 0x05
    2088:	8d 81       	ldd	r24, Y+5	; 0x05
    208a:	9e 81       	ldd	r25, Y+6	; 0x06
    208c:	9a 83       	std	Y+2, r25	; 0x02
    208e:	89 83       	std	Y+1, r24	; 0x01
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	9a 81       	ldd	r25, Y+2	; 0x02
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	f1 f7       	brne	.-4      	; 0x2094 <LCD_init+0x118>
    2098:	9a 83       	std	Y+2, r25	; 0x02
    209a:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	6f ef       	ldi	r22, 0xFF	; 255
    20a0:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    20a4:	88 e3       	ldi	r24, 0x38	; 56
    20a6:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    20aa:	8c e0       	ldi	r24, 0x0C	; 12
    20ac:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_sendCommand>
}
    20b6:	2e 96       	adiw	r28, 0x0e	; 14
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	e9 97       	sbiw	r28, 0x39	; 57
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    20de:	82 e0       	ldi	r24, 0x02	; 2
    20e0:	64 e0       	ldi	r22, 0x04	; 4
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <GPIO_writePin>
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	a0 e8       	ldi	r26, 0x80	; 128
    20ee:	bf e3       	ldi	r27, 0x3F	; 63
    20f0:	8d ab       	std	Y+53, r24	; 0x35
    20f2:	9e ab       	std	Y+54, r25	; 0x36
    20f4:	af ab       	std	Y+55, r26	; 0x37
    20f6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f8:	6d a9       	ldd	r22, Y+53	; 0x35
    20fa:	7e a9       	ldd	r23, Y+54	; 0x36
    20fc:	8f a9       	ldd	r24, Y+55	; 0x37
    20fe:	98 ad       	ldd	r25, Y+56	; 0x38
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	4a ef       	ldi	r20, 0xFA	; 250
    2106:	54 e4       	ldi	r21, 0x44	; 68
    2108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	89 ab       	std	Y+49, r24	; 0x31
    2112:	9a ab       	std	Y+50, r25	; 0x32
    2114:	ab ab       	std	Y+51, r26	; 0x33
    2116:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2118:	69 a9       	ldd	r22, Y+49	; 0x31
    211a:	7a a9       	ldd	r23, Y+50	; 0x32
    211c:	8b a9       	ldd	r24, Y+51	; 0x33
    211e:	9c a9       	ldd	r25, Y+52	; 0x34
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	40 e8       	ldi	r20, 0x80	; 128
    2126:	5f e3       	ldi	r21, 0x3F	; 63
    2128:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    212c:	88 23       	and	r24, r24
    212e:	2c f4       	brge	.+10     	; 0x213a <LCD_sendCommand+0x72>
		__ticks = 1;
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	98 ab       	std	Y+48, r25	; 0x30
    2136:	8f a7       	std	Y+47, r24	; 0x2f
    2138:	3f c0       	rjmp	.+126    	; 0x21b8 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    213a:	69 a9       	ldd	r22, Y+49	; 0x31
    213c:	7a a9       	ldd	r23, Y+50	; 0x32
    213e:	8b a9       	ldd	r24, Y+51	; 0x33
    2140:	9c a9       	ldd	r25, Y+52	; 0x34
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	3f ef       	ldi	r19, 0xFF	; 255
    2146:	4f e7       	ldi	r20, 0x7F	; 127
    2148:	57 e4       	ldi	r21, 0x47	; 71
    214a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    214e:	18 16       	cp	r1, r24
    2150:	4c f5       	brge	.+82     	; 0x21a4 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2152:	6d a9       	ldd	r22, Y+53	; 0x35
    2154:	7e a9       	ldd	r23, Y+54	; 0x36
    2156:	8f a9       	ldd	r24, Y+55	; 0x37
    2158:	98 ad       	ldd	r25, Y+56	; 0x38
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e2       	ldi	r20, 0x20	; 32
    2160:	51 e4       	ldi	r21, 0x41	; 65
    2162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	bc 01       	movw	r22, r24
    216c:	cd 01       	movw	r24, r26
    216e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	98 ab       	std	Y+48, r25	; 0x30
    2178:	8f a7       	std	Y+47, r24	; 0x2f
    217a:	0f c0       	rjmp	.+30     	; 0x219a <LCD_sendCommand+0xd2>
    217c:	88 ec       	ldi	r24, 0xC8	; 200
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	9e a7       	std	Y+46, r25	; 0x2e
    2182:	8d a7       	std	Y+45, r24	; 0x2d
    2184:	8d a5       	ldd	r24, Y+45	; 0x2d
    2186:	9e a5       	ldd	r25, Y+46	; 0x2e
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <LCD_sendCommand+0xc0>
    218c:	9e a7       	std	Y+46, r25	; 0x2e
    218e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2190:	8f a5       	ldd	r24, Y+47	; 0x2f
    2192:	98 a9       	ldd	r25, Y+48	; 0x30
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	98 ab       	std	Y+48, r25	; 0x30
    2198:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219a:	8f a5       	ldd	r24, Y+47	; 0x2f
    219c:	98 a9       	ldd	r25, Y+48	; 0x30
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	69 f7       	brne	.-38     	; 0x217c <LCD_sendCommand+0xb4>
    21a2:	14 c0       	rjmp	.+40     	; 0x21cc <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a4:	69 a9       	ldd	r22, Y+49	; 0x31
    21a6:	7a a9       	ldd	r23, Y+50	; 0x32
    21a8:	8b a9       	ldd	r24, Y+51	; 0x33
    21aa:	9c a9       	ldd	r25, Y+52	; 0x34
    21ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	98 ab       	std	Y+48, r25	; 0x30
    21b6:	8f a7       	std	Y+47, r24	; 0x2f
    21b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ba:	98 a9       	ldd	r25, Y+48	; 0x30
    21bc:	9c a7       	std	Y+44, r25	; 0x2c
    21be:	8b a7       	std	Y+43, r24	; 0x2b
    21c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    21c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <LCD_sendCommand+0xfc>
    21c8:	9c a7       	std	Y+44, r25	; 0x2c
    21ca:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    21cc:	82 e0       	ldi	r24, 0x02	; 2
    21ce:	63 e0       	ldi	r22, 0x03	; 3
    21d0:	41 e0       	ldi	r20, 0x01	; 1
    21d2:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <GPIO_writePin>
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	a0 e8       	ldi	r26, 0x80	; 128
    21dc:	bf e3       	ldi	r27, 0x3F	; 63
    21de:	8f a3       	std	Y+39, r24	; 0x27
    21e0:	98 a7       	std	Y+40, r25	; 0x28
    21e2:	a9 a7       	std	Y+41, r26	; 0x29
    21e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e6:	6f a1       	ldd	r22, Y+39	; 0x27
    21e8:	78 a5       	ldd	r23, Y+40	; 0x28
    21ea:	89 a5       	ldd	r24, Y+41	; 0x29
    21ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	4a ef       	ldi	r20, 0xFA	; 250
    21f4:	54 e4       	ldi	r21, 0x44	; 68
    21f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	8b a3       	std	Y+35, r24	; 0x23
    2200:	9c a3       	std	Y+36, r25	; 0x24
    2202:	ad a3       	std	Y+37, r26	; 0x25
    2204:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2206:	6b a1       	ldd	r22, Y+35	; 0x23
    2208:	7c a1       	ldd	r23, Y+36	; 0x24
    220a:	8d a1       	ldd	r24, Y+37	; 0x25
    220c:	9e a1       	ldd	r25, Y+38	; 0x26
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e8       	ldi	r20, 0x80	; 128
    2214:	5f e3       	ldi	r21, 0x3F	; 63
    2216:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    221a:	88 23       	and	r24, r24
    221c:	2c f4       	brge	.+10     	; 0x2228 <LCD_sendCommand+0x160>
		__ticks = 1;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	9a a3       	std	Y+34, r25	; 0x22
    2224:	89 a3       	std	Y+33, r24	; 0x21
    2226:	3f c0       	rjmp	.+126    	; 0x22a6 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2228:	6b a1       	ldd	r22, Y+35	; 0x23
    222a:	7c a1       	ldd	r23, Y+36	; 0x24
    222c:	8d a1       	ldd	r24, Y+37	; 0x25
    222e:	9e a1       	ldd	r25, Y+38	; 0x26
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	3f ef       	ldi	r19, 0xFF	; 255
    2234:	4f e7       	ldi	r20, 0x7F	; 127
    2236:	57 e4       	ldi	r21, 0x47	; 71
    2238:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    223c:	18 16       	cp	r1, r24
    223e:	4c f5       	brge	.+82     	; 0x2292 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2240:	6f a1       	ldd	r22, Y+39	; 0x27
    2242:	78 a5       	ldd	r23, Y+40	; 0x28
    2244:	89 a5       	ldd	r24, Y+41	; 0x29
    2246:	9a a5       	ldd	r25, Y+42	; 0x2a
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e2       	ldi	r20, 0x20	; 32
    224e:	51 e4       	ldi	r21, 0x41	; 65
    2250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	bc 01       	movw	r22, r24
    225a:	cd 01       	movw	r24, r26
    225c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	9a a3       	std	Y+34, r25	; 0x22
    2266:	89 a3       	std	Y+33, r24	; 0x21
    2268:	0f c0       	rjmp	.+30     	; 0x2288 <LCD_sendCommand+0x1c0>
    226a:	88 ec       	ldi	r24, 0xC8	; 200
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	98 a3       	std	Y+32, r25	; 0x20
    2270:	8f 8f       	std	Y+31, r24	; 0x1f
    2272:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2274:	98 a1       	ldd	r25, Y+32	; 0x20
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	f1 f7       	brne	.-4      	; 0x2276 <LCD_sendCommand+0x1ae>
    227a:	98 a3       	std	Y+32, r25	; 0x20
    227c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227e:	89 a1       	ldd	r24, Y+33	; 0x21
    2280:	9a a1       	ldd	r25, Y+34	; 0x22
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	9a a3       	std	Y+34, r25	; 0x22
    2286:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2288:	89 a1       	ldd	r24, Y+33	; 0x21
    228a:	9a a1       	ldd	r25, Y+34	; 0x22
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	69 f7       	brne	.-38     	; 0x226a <LCD_sendCommand+0x1a2>
    2290:	14 c0       	rjmp	.+40     	; 0x22ba <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2292:	6b a1       	ldd	r22, Y+35	; 0x23
    2294:	7c a1       	ldd	r23, Y+36	; 0x24
    2296:	8d a1       	ldd	r24, Y+37	; 0x25
    2298:	9e a1       	ldd	r25, Y+38	; 0x26
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	9a a3       	std	Y+34, r25	; 0x22
    22a4:	89 a3       	std	Y+33, r24	; 0x21
    22a6:	89 a1       	ldd	r24, Y+33	; 0x21
    22a8:	9a a1       	ldd	r25, Y+34	; 0x22
    22aa:	9e 8f       	std	Y+30, r25	; 0x1e
    22ac:	8d 8f       	std	Y+29, r24	; 0x1d
    22ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <LCD_sendCommand+0x1ea>
    22b6:	9e 8f       	std	Y+30, r25	; 0x1e
    22b8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	69 ad       	ldd	r22, Y+57	; 0x39
    22be:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <GPIO_writePort>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	a0 e8       	ldi	r26, 0x80	; 128
    22c8:	bf e3       	ldi	r27, 0x3F	; 63
    22ca:	89 8f       	std	Y+25, r24	; 0x19
    22cc:	9a 8f       	std	Y+26, r25	; 0x1a
    22ce:	ab 8f       	std	Y+27, r26	; 0x1b
    22d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d2:	69 8d       	ldd	r22, Y+25	; 0x19
    22d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	4a ef       	ldi	r20, 0xFA	; 250
    22e0:	54 e4       	ldi	r21, 0x44	; 68
    22e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	8d 8b       	std	Y+21, r24	; 0x15
    22ec:	9e 8b       	std	Y+22, r25	; 0x16
    22ee:	af 8b       	std	Y+23, r26	; 0x17
    22f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22f2:	6d 89       	ldd	r22, Y+21	; 0x15
    22f4:	7e 89       	ldd	r23, Y+22	; 0x16
    22f6:	8f 89       	ldd	r24, Y+23	; 0x17
    22f8:	98 8d       	ldd	r25, Y+24	; 0x18
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e8       	ldi	r20, 0x80	; 128
    2300:	5f e3       	ldi	r21, 0x3F	; 63
    2302:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2306:	88 23       	and	r24, r24
    2308:	2c f4       	brge	.+10     	; 0x2314 <LCD_sendCommand+0x24c>
		__ticks = 1;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	9c 8b       	std	Y+20, r25	; 0x14
    2310:	8b 8b       	std	Y+19, r24	; 0x13
    2312:	3f c0       	rjmp	.+126    	; 0x2392 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2314:	6d 89       	ldd	r22, Y+21	; 0x15
    2316:	7e 89       	ldd	r23, Y+22	; 0x16
    2318:	8f 89       	ldd	r24, Y+23	; 0x17
    231a:	98 8d       	ldd	r25, Y+24	; 0x18
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	3f ef       	ldi	r19, 0xFF	; 255
    2320:	4f e7       	ldi	r20, 0x7F	; 127
    2322:	57 e4       	ldi	r21, 0x47	; 71
    2324:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2328:	18 16       	cp	r1, r24
    232a:	4c f5       	brge	.+82     	; 0x237e <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232c:	69 8d       	ldd	r22, Y+25	; 0x19
    232e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2330:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2332:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e2       	ldi	r20, 0x20	; 32
    233a:	51 e4       	ldi	r21, 0x41	; 65
    233c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	9c 8b       	std	Y+20, r25	; 0x14
    2352:	8b 8b       	std	Y+19, r24	; 0x13
    2354:	0f c0       	rjmp	.+30     	; 0x2374 <LCD_sendCommand+0x2ac>
    2356:	88 ec       	ldi	r24, 0xC8	; 200
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	9a 8b       	std	Y+18, r25	; 0x12
    235c:	89 8b       	std	Y+17, r24	; 0x11
    235e:	89 89       	ldd	r24, Y+17	; 0x11
    2360:	9a 89       	ldd	r25, Y+18	; 0x12
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <LCD_sendCommand+0x29a>
    2366:	9a 8b       	std	Y+18, r25	; 0x12
    2368:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236a:	8b 89       	ldd	r24, Y+19	; 0x13
    236c:	9c 89       	ldd	r25, Y+20	; 0x14
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	9c 8b       	std	Y+20, r25	; 0x14
    2372:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2374:	8b 89       	ldd	r24, Y+19	; 0x13
    2376:	9c 89       	ldd	r25, Y+20	; 0x14
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	69 f7       	brne	.-38     	; 0x2356 <LCD_sendCommand+0x28e>
    237c:	14 c0       	rjmp	.+40     	; 0x23a6 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237e:	6d 89       	ldd	r22, Y+21	; 0x15
    2380:	7e 89       	ldd	r23, Y+22	; 0x16
    2382:	8f 89       	ldd	r24, Y+23	; 0x17
    2384:	98 8d       	ldd	r25, Y+24	; 0x18
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9c 8b       	std	Y+20, r25	; 0x14
    2390:	8b 8b       	std	Y+19, r24	; 0x13
    2392:	8b 89       	ldd	r24, Y+19	; 0x13
    2394:	9c 89       	ldd	r25, Y+20	; 0x14
    2396:	98 8b       	std	Y+16, r25	; 0x10
    2398:	8f 87       	std	Y+15, r24	; 0x0f
    239a:	8f 85       	ldd	r24, Y+15	; 0x0f
    239c:	98 89       	ldd	r25, Y+16	; 0x10
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	f1 f7       	brne	.-4      	; 0x239e <LCD_sendCommand+0x2d6>
    23a2:	98 8b       	std	Y+16, r25	; 0x10
    23a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    23a6:	82 e0       	ldi	r24, 0x02	; 2
    23a8:	63 e0       	ldi	r22, 0x03	; 3
    23aa:	40 e0       	ldi	r20, 0x00	; 0
    23ac:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <GPIO_writePin>
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	a0 e8       	ldi	r26, 0x80	; 128
    23b6:	bf e3       	ldi	r27, 0x3F	; 63
    23b8:	8b 87       	std	Y+11, r24	; 0x0b
    23ba:	9c 87       	std	Y+12, r25	; 0x0c
    23bc:	ad 87       	std	Y+13, r26	; 0x0d
    23be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	4a ef       	ldi	r20, 0xFA	; 250
    23ce:	54 e4       	ldi	r21, 0x44	; 68
    23d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	8f 83       	std	Y+7, r24	; 0x07
    23da:	98 87       	std	Y+8, r25	; 0x08
    23dc:	a9 87       	std	Y+9, r26	; 0x09
    23de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23e0:	6f 81       	ldd	r22, Y+7	; 0x07
    23e2:	78 85       	ldd	r23, Y+8	; 0x08
    23e4:	89 85       	ldd	r24, Y+9	; 0x09
    23e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	40 e8       	ldi	r20, 0x80	; 128
    23ee:	5f e3       	ldi	r21, 0x3F	; 63
    23f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23f4:	88 23       	and	r24, r24
    23f6:	2c f4       	brge	.+10     	; 0x2402 <LCD_sendCommand+0x33a>
		__ticks = 1;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
    2400:	3f c0       	rjmp	.+126    	; 0x2480 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2402:	6f 81       	ldd	r22, Y+7	; 0x07
    2404:	78 85       	ldd	r23, Y+8	; 0x08
    2406:	89 85       	ldd	r24, Y+9	; 0x09
    2408:	9a 85       	ldd	r25, Y+10	; 0x0a
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	3f ef       	ldi	r19, 0xFF	; 255
    240e:	4f e7       	ldi	r20, 0x7F	; 127
    2410:	57 e4       	ldi	r21, 0x47	; 71
    2412:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2416:	18 16       	cp	r1, r24
    2418:	4c f5       	brge	.+82     	; 0x246c <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241a:	6b 85       	ldd	r22, Y+11	; 0x0b
    241c:	7c 85       	ldd	r23, Y+12	; 0x0c
    241e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2420:	9e 85       	ldd	r25, Y+14	; 0x0e
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e2       	ldi	r20, 0x20	; 32
    2428:	51 e4       	ldi	r21, 0x41	; 65
    242a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	bc 01       	movw	r22, r24
    2434:	cd 01       	movw	r24, r26
    2436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	9e 83       	std	Y+6, r25	; 0x06
    2440:	8d 83       	std	Y+5, r24	; 0x05
    2442:	0f c0       	rjmp	.+30     	; 0x2462 <LCD_sendCommand+0x39a>
    2444:	88 ec       	ldi	r24, 0xC8	; 200
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	9c 83       	std	Y+4, r25	; 0x04
    244a:	8b 83       	std	Y+3, r24	; 0x03
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	9c 81       	ldd	r25, Y+4	; 0x04
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <LCD_sendCommand+0x388>
    2454:	9c 83       	std	Y+4, r25	; 0x04
    2456:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2458:	8d 81       	ldd	r24, Y+5	; 0x05
    245a:	9e 81       	ldd	r25, Y+6	; 0x06
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	9e 83       	std	Y+6, r25	; 0x06
    2460:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2462:	8d 81       	ldd	r24, Y+5	; 0x05
    2464:	9e 81       	ldd	r25, Y+6	; 0x06
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	69 f7       	brne	.-38     	; 0x2444 <LCD_sendCommand+0x37c>
    246a:	14 c0       	rjmp	.+40     	; 0x2494 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246c:	6f 81       	ldd	r22, Y+7	; 0x07
    246e:	78 85       	ldd	r23, Y+8	; 0x08
    2470:	89 85       	ldd	r24, Y+9	; 0x09
    2472:	9a 85       	ldd	r25, Y+10	; 0x0a
    2474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	9e 83       	std	Y+6, r25	; 0x06
    247e:	8d 83       	std	Y+5, r24	; 0x05
    2480:	8d 81       	ldd	r24, Y+5	; 0x05
    2482:	9e 81       	ldd	r25, Y+6	; 0x06
    2484:	9a 83       	std	Y+2, r25	; 0x02
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	9a 81       	ldd	r25, Y+2	; 0x02
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	f1 f7       	brne	.-4      	; 0x248c <LCD_sendCommand+0x3c4>
    2490:	9a 83       	std	Y+2, r25	; 0x02
    2492:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2494:	e9 96       	adiw	r28, 0x39	; 57
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	de bf       	out	0x3e, r29	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	cd bf       	out	0x3d, r28	; 61
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	08 95       	ret

000024a6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    24a6:	df 93       	push	r29
    24a8:	cf 93       	push	r28
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	e9 97       	sbiw	r28, 0x39	; 57
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    24bc:	82 e0       	ldi	r24, 0x02	; 2
    24be:	64 e0       	ldi	r22, 0x04	; 4
    24c0:	41 e0       	ldi	r20, 0x01	; 1
    24c2:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <GPIO_writePin>
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	a0 e8       	ldi	r26, 0x80	; 128
    24cc:	bf e3       	ldi	r27, 0x3F	; 63
    24ce:	8d ab       	std	Y+53, r24	; 0x35
    24d0:	9e ab       	std	Y+54, r25	; 0x36
    24d2:	af ab       	std	Y+55, r26	; 0x37
    24d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d6:	6d a9       	ldd	r22, Y+53	; 0x35
    24d8:	7e a9       	ldd	r23, Y+54	; 0x36
    24da:	8f a9       	ldd	r24, Y+55	; 0x37
    24dc:	98 ad       	ldd	r25, Y+56	; 0x38
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	4a ef       	ldi	r20, 0xFA	; 250
    24e4:	54 e4       	ldi	r21, 0x44	; 68
    24e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	89 ab       	std	Y+49, r24	; 0x31
    24f0:	9a ab       	std	Y+50, r25	; 0x32
    24f2:	ab ab       	std	Y+51, r26	; 0x33
    24f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24f6:	69 a9       	ldd	r22, Y+49	; 0x31
    24f8:	7a a9       	ldd	r23, Y+50	; 0x32
    24fa:	8b a9       	ldd	r24, Y+51	; 0x33
    24fc:	9c a9       	ldd	r25, Y+52	; 0x34
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e8       	ldi	r20, 0x80	; 128
    2504:	5f e3       	ldi	r21, 0x3F	; 63
    2506:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    250a:	88 23       	and	r24, r24
    250c:	2c f4       	brge	.+10     	; 0x2518 <LCD_displayCharacter+0x72>
		__ticks = 1;
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	98 ab       	std	Y+48, r25	; 0x30
    2514:	8f a7       	std	Y+47, r24	; 0x2f
    2516:	3f c0       	rjmp	.+126    	; 0x2596 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2518:	69 a9       	ldd	r22, Y+49	; 0x31
    251a:	7a a9       	ldd	r23, Y+50	; 0x32
    251c:	8b a9       	ldd	r24, Y+51	; 0x33
    251e:	9c a9       	ldd	r25, Y+52	; 0x34
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	3f ef       	ldi	r19, 0xFF	; 255
    2524:	4f e7       	ldi	r20, 0x7F	; 127
    2526:	57 e4       	ldi	r21, 0x47	; 71
    2528:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    252c:	18 16       	cp	r1, r24
    252e:	4c f5       	brge	.+82     	; 0x2582 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2530:	6d a9       	ldd	r22, Y+53	; 0x35
    2532:	7e a9       	ldd	r23, Y+54	; 0x36
    2534:	8f a9       	ldd	r24, Y+55	; 0x37
    2536:	98 ad       	ldd	r25, Y+56	; 0x38
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e2       	ldi	r20, 0x20	; 32
    253e:	51 e4       	ldi	r21, 0x41	; 65
    2540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	bc 01       	movw	r22, r24
    254a:	cd 01       	movw	r24, r26
    254c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	98 ab       	std	Y+48, r25	; 0x30
    2556:	8f a7       	std	Y+47, r24	; 0x2f
    2558:	0f c0       	rjmp	.+30     	; 0x2578 <LCD_displayCharacter+0xd2>
    255a:	88 ec       	ldi	r24, 0xC8	; 200
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	9e a7       	std	Y+46, r25	; 0x2e
    2560:	8d a7       	std	Y+45, r24	; 0x2d
    2562:	8d a5       	ldd	r24, Y+45	; 0x2d
    2564:	9e a5       	ldd	r25, Y+46	; 0x2e
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	f1 f7       	brne	.-4      	; 0x2566 <LCD_displayCharacter+0xc0>
    256a:	9e a7       	std	Y+46, r25	; 0x2e
    256c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2570:	98 a9       	ldd	r25, Y+48	; 0x30
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	98 ab       	std	Y+48, r25	; 0x30
    2576:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2578:	8f a5       	ldd	r24, Y+47	; 0x2f
    257a:	98 a9       	ldd	r25, Y+48	; 0x30
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	69 f7       	brne	.-38     	; 0x255a <LCD_displayCharacter+0xb4>
    2580:	14 c0       	rjmp	.+40     	; 0x25aa <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2582:	69 a9       	ldd	r22, Y+49	; 0x31
    2584:	7a a9       	ldd	r23, Y+50	; 0x32
    2586:	8b a9       	ldd	r24, Y+51	; 0x33
    2588:	9c a9       	ldd	r25, Y+52	; 0x34
    258a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	98 ab       	std	Y+48, r25	; 0x30
    2594:	8f a7       	std	Y+47, r24	; 0x2f
    2596:	8f a5       	ldd	r24, Y+47	; 0x2f
    2598:	98 a9       	ldd	r25, Y+48	; 0x30
    259a:	9c a7       	std	Y+44, r25	; 0x2c
    259c:	8b a7       	std	Y+43, r24	; 0x2b
    259e:	8b a5       	ldd	r24, Y+43	; 0x2b
    25a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	f1 f7       	brne	.-4      	; 0x25a2 <LCD_displayCharacter+0xfc>
    25a6:	9c a7       	std	Y+44, r25	; 0x2c
    25a8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25aa:	82 e0       	ldi	r24, 0x02	; 2
    25ac:	63 e0       	ldi	r22, 0x03	; 3
    25ae:	41 e0       	ldi	r20, 0x01	; 1
    25b0:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <GPIO_writePin>
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	a0 e8       	ldi	r26, 0x80	; 128
    25ba:	bf e3       	ldi	r27, 0x3F	; 63
    25bc:	8f a3       	std	Y+39, r24	; 0x27
    25be:	98 a7       	std	Y+40, r25	; 0x28
    25c0:	a9 a7       	std	Y+41, r26	; 0x29
    25c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c4:	6f a1       	ldd	r22, Y+39	; 0x27
    25c6:	78 a5       	ldd	r23, Y+40	; 0x28
    25c8:	89 a5       	ldd	r24, Y+41	; 0x29
    25ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	4a ef       	ldi	r20, 0xFA	; 250
    25d2:	54 e4       	ldi	r21, 0x44	; 68
    25d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	8b a3       	std	Y+35, r24	; 0x23
    25de:	9c a3       	std	Y+36, r25	; 0x24
    25e0:	ad a3       	std	Y+37, r26	; 0x25
    25e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25e4:	6b a1       	ldd	r22, Y+35	; 0x23
    25e6:	7c a1       	ldd	r23, Y+36	; 0x24
    25e8:	8d a1       	ldd	r24, Y+37	; 0x25
    25ea:	9e a1       	ldd	r25, Y+38	; 0x26
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e8       	ldi	r20, 0x80	; 128
    25f2:	5f e3       	ldi	r21, 0x3F	; 63
    25f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25f8:	88 23       	and	r24, r24
    25fa:	2c f4       	brge	.+10     	; 0x2606 <LCD_displayCharacter+0x160>
		__ticks = 1;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	9a a3       	std	Y+34, r25	; 0x22
    2602:	89 a3       	std	Y+33, r24	; 0x21
    2604:	3f c0       	rjmp	.+126    	; 0x2684 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2606:	6b a1       	ldd	r22, Y+35	; 0x23
    2608:	7c a1       	ldd	r23, Y+36	; 0x24
    260a:	8d a1       	ldd	r24, Y+37	; 0x25
    260c:	9e a1       	ldd	r25, Y+38	; 0x26
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	3f ef       	ldi	r19, 0xFF	; 255
    2612:	4f e7       	ldi	r20, 0x7F	; 127
    2614:	57 e4       	ldi	r21, 0x47	; 71
    2616:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    261a:	18 16       	cp	r1, r24
    261c:	4c f5       	brge	.+82     	; 0x2670 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261e:	6f a1       	ldd	r22, Y+39	; 0x27
    2620:	78 a5       	ldd	r23, Y+40	; 0x28
    2622:	89 a5       	ldd	r24, Y+41	; 0x29
    2624:	9a a5       	ldd	r25, Y+42	; 0x2a
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	40 e2       	ldi	r20, 0x20	; 32
    262c:	51 e4       	ldi	r21, 0x41	; 65
    262e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	bc 01       	movw	r22, r24
    2638:	cd 01       	movw	r24, r26
    263a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	9a a3       	std	Y+34, r25	; 0x22
    2644:	89 a3       	std	Y+33, r24	; 0x21
    2646:	0f c0       	rjmp	.+30     	; 0x2666 <LCD_displayCharacter+0x1c0>
    2648:	88 ec       	ldi	r24, 0xC8	; 200
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	98 a3       	std	Y+32, r25	; 0x20
    264e:	8f 8f       	std	Y+31, r24	; 0x1f
    2650:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2652:	98 a1       	ldd	r25, Y+32	; 0x20
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <LCD_displayCharacter+0x1ae>
    2658:	98 a3       	std	Y+32, r25	; 0x20
    265a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265c:	89 a1       	ldd	r24, Y+33	; 0x21
    265e:	9a a1       	ldd	r25, Y+34	; 0x22
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	9a a3       	std	Y+34, r25	; 0x22
    2664:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2666:	89 a1       	ldd	r24, Y+33	; 0x21
    2668:	9a a1       	ldd	r25, Y+34	; 0x22
    266a:	00 97       	sbiw	r24, 0x00	; 0
    266c:	69 f7       	brne	.-38     	; 0x2648 <LCD_displayCharacter+0x1a2>
    266e:	14 c0       	rjmp	.+40     	; 0x2698 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2670:	6b a1       	ldd	r22, Y+35	; 0x23
    2672:	7c a1       	ldd	r23, Y+36	; 0x24
    2674:	8d a1       	ldd	r24, Y+37	; 0x25
    2676:	9e a1       	ldd	r25, Y+38	; 0x26
    2678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	9a a3       	std	Y+34, r25	; 0x22
    2682:	89 a3       	std	Y+33, r24	; 0x21
    2684:	89 a1       	ldd	r24, Y+33	; 0x21
    2686:	9a a1       	ldd	r25, Y+34	; 0x22
    2688:	9e 8f       	std	Y+30, r25	; 0x1e
    268a:	8d 8f       	std	Y+29, r24	; 0x1d
    268c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    268e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <LCD_displayCharacter+0x1ea>
    2694:	9e 8f       	std	Y+30, r25	; 0x1e
    2696:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	69 ad       	ldd	r22, Y+57	; 0x39
    269c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <GPIO_writePort>
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	a0 e8       	ldi	r26, 0x80	; 128
    26a6:	bf e3       	ldi	r27, 0x3F	; 63
    26a8:	89 8f       	std	Y+25, r24	; 0x19
    26aa:	9a 8f       	std	Y+26, r25	; 0x1a
    26ac:	ab 8f       	std	Y+27, r26	; 0x1b
    26ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b0:	69 8d       	ldd	r22, Y+25	; 0x19
    26b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	4a ef       	ldi	r20, 0xFA	; 250
    26be:	54 e4       	ldi	r21, 0x44	; 68
    26c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	8d 8b       	std	Y+21, r24	; 0x15
    26ca:	9e 8b       	std	Y+22, r25	; 0x16
    26cc:	af 8b       	std	Y+23, r26	; 0x17
    26ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26d0:	6d 89       	ldd	r22, Y+21	; 0x15
    26d2:	7e 89       	ldd	r23, Y+22	; 0x16
    26d4:	8f 89       	ldd	r24, Y+23	; 0x17
    26d6:	98 8d       	ldd	r25, Y+24	; 0x18
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e8       	ldi	r20, 0x80	; 128
    26de:	5f e3       	ldi	r21, 0x3F	; 63
    26e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26e4:	88 23       	and	r24, r24
    26e6:	2c f4       	brge	.+10     	; 0x26f2 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	9c 8b       	std	Y+20, r25	; 0x14
    26ee:	8b 8b       	std	Y+19, r24	; 0x13
    26f0:	3f c0       	rjmp	.+126    	; 0x2770 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    26f2:	6d 89       	ldd	r22, Y+21	; 0x15
    26f4:	7e 89       	ldd	r23, Y+22	; 0x16
    26f6:	8f 89       	ldd	r24, Y+23	; 0x17
    26f8:	98 8d       	ldd	r25, Y+24	; 0x18
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	3f ef       	ldi	r19, 0xFF	; 255
    26fe:	4f e7       	ldi	r20, 0x7F	; 127
    2700:	57 e4       	ldi	r21, 0x47	; 71
    2702:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2706:	18 16       	cp	r1, r24
    2708:	4c f5       	brge	.+82     	; 0x275c <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    270a:	69 8d       	ldd	r22, Y+25	; 0x19
    270c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    270e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2710:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e2       	ldi	r20, 0x20	; 32
    2718:	51 e4       	ldi	r21, 0x41	; 65
    271a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	bc 01       	movw	r22, r24
    2724:	cd 01       	movw	r24, r26
    2726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	9c 8b       	std	Y+20, r25	; 0x14
    2730:	8b 8b       	std	Y+19, r24	; 0x13
    2732:	0f c0       	rjmp	.+30     	; 0x2752 <LCD_displayCharacter+0x2ac>
    2734:	88 ec       	ldi	r24, 0xC8	; 200
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	9a 8b       	std	Y+18, r25	; 0x12
    273a:	89 8b       	std	Y+17, r24	; 0x11
    273c:	89 89       	ldd	r24, Y+17	; 0x11
    273e:	9a 89       	ldd	r25, Y+18	; 0x12
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	f1 f7       	brne	.-4      	; 0x2740 <LCD_displayCharacter+0x29a>
    2744:	9a 8b       	std	Y+18, r25	; 0x12
    2746:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2748:	8b 89       	ldd	r24, Y+19	; 0x13
    274a:	9c 89       	ldd	r25, Y+20	; 0x14
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	9c 8b       	std	Y+20, r25	; 0x14
    2750:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2752:	8b 89       	ldd	r24, Y+19	; 0x13
    2754:	9c 89       	ldd	r25, Y+20	; 0x14
    2756:	00 97       	sbiw	r24, 0x00	; 0
    2758:	69 f7       	brne	.-38     	; 0x2734 <LCD_displayCharacter+0x28e>
    275a:	14 c0       	rjmp	.+40     	; 0x2784 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    275c:	6d 89       	ldd	r22, Y+21	; 0x15
    275e:	7e 89       	ldd	r23, Y+22	; 0x16
    2760:	8f 89       	ldd	r24, Y+23	; 0x17
    2762:	98 8d       	ldd	r25, Y+24	; 0x18
    2764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	9c 8b       	std	Y+20, r25	; 0x14
    276e:	8b 8b       	std	Y+19, r24	; 0x13
    2770:	8b 89       	ldd	r24, Y+19	; 0x13
    2772:	9c 89       	ldd	r25, Y+20	; 0x14
    2774:	98 8b       	std	Y+16, r25	; 0x10
    2776:	8f 87       	std	Y+15, r24	; 0x0f
    2778:	8f 85       	ldd	r24, Y+15	; 0x0f
    277a:	98 89       	ldd	r25, Y+16	; 0x10
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	f1 f7       	brne	.-4      	; 0x277c <LCD_displayCharacter+0x2d6>
    2780:	98 8b       	std	Y+16, r25	; 0x10
    2782:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2784:	82 e0       	ldi	r24, 0x02	; 2
    2786:	63 e0       	ldi	r22, 0x03	; 3
    2788:	40 e0       	ldi	r20, 0x00	; 0
    278a:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <GPIO_writePin>
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	a0 e8       	ldi	r26, 0x80	; 128
    2794:	bf e3       	ldi	r27, 0x3F	; 63
    2796:	8b 87       	std	Y+11, r24	; 0x0b
    2798:	9c 87       	std	Y+12, r25	; 0x0c
    279a:	ad 87       	std	Y+13, r26	; 0x0d
    279c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    279e:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	4a ef       	ldi	r20, 0xFA	; 250
    27ac:	54 e4       	ldi	r21, 0x44	; 68
    27ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	8f 83       	std	Y+7, r24	; 0x07
    27b8:	98 87       	std	Y+8, r25	; 0x08
    27ba:	a9 87       	std	Y+9, r26	; 0x09
    27bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27be:	6f 81       	ldd	r22, Y+7	; 0x07
    27c0:	78 85       	ldd	r23, Y+8	; 0x08
    27c2:	89 85       	ldd	r24, Y+9	; 0x09
    27c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	40 e8       	ldi	r20, 0x80	; 128
    27cc:	5f e3       	ldi	r21, 0x3F	; 63
    27ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27d2:	88 23       	and	r24, r24
    27d4:	2c f4       	brge	.+10     	; 0x27e0 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	9e 83       	std	Y+6, r25	; 0x06
    27dc:	8d 83       	std	Y+5, r24	; 0x05
    27de:	3f c0       	rjmp	.+126    	; 0x285e <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    27e0:	6f 81       	ldd	r22, Y+7	; 0x07
    27e2:	78 85       	ldd	r23, Y+8	; 0x08
    27e4:	89 85       	ldd	r24, Y+9	; 0x09
    27e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	3f ef       	ldi	r19, 0xFF	; 255
    27ec:	4f e7       	ldi	r20, 0x7F	; 127
    27ee:	57 e4       	ldi	r21, 0x47	; 71
    27f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27f4:	18 16       	cp	r1, r24
    27f6:	4c f5       	brge	.+82     	; 0x284a <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    27fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e2       	ldi	r20, 0x20	; 32
    2806:	51 e4       	ldi	r21, 0x41	; 65
    2808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	bc 01       	movw	r22, r24
    2812:	cd 01       	movw	r24, r26
    2814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	9e 83       	std	Y+6, r25	; 0x06
    281e:	8d 83       	std	Y+5, r24	; 0x05
    2820:	0f c0       	rjmp	.+30     	; 0x2840 <LCD_displayCharacter+0x39a>
    2822:	88 ec       	ldi	r24, 0xC8	; 200
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	9c 83       	std	Y+4, r25	; 0x04
    2828:	8b 83       	std	Y+3, r24	; 0x03
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	9c 81       	ldd	r25, Y+4	; 0x04
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <LCD_displayCharacter+0x388>
    2832:	9c 83       	std	Y+4, r25	; 0x04
    2834:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2836:	8d 81       	ldd	r24, Y+5	; 0x05
    2838:	9e 81       	ldd	r25, Y+6	; 0x06
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	9e 83       	std	Y+6, r25	; 0x06
    283e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2840:	8d 81       	ldd	r24, Y+5	; 0x05
    2842:	9e 81       	ldd	r25, Y+6	; 0x06
    2844:	00 97       	sbiw	r24, 0x00	; 0
    2846:	69 f7       	brne	.-38     	; 0x2822 <LCD_displayCharacter+0x37c>
    2848:	14 c0       	rjmp	.+40     	; 0x2872 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284a:	6f 81       	ldd	r22, Y+7	; 0x07
    284c:	78 85       	ldd	r23, Y+8	; 0x08
    284e:	89 85       	ldd	r24, Y+9	; 0x09
    2850:	9a 85       	ldd	r25, Y+10	; 0x0a
    2852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	9e 83       	std	Y+6, r25	; 0x06
    285c:	8d 83       	std	Y+5, r24	; 0x05
    285e:	8d 81       	ldd	r24, Y+5	; 0x05
    2860:	9e 81       	ldd	r25, Y+6	; 0x06
    2862:	9a 83       	std	Y+2, r25	; 0x02
    2864:	89 83       	std	Y+1, r24	; 0x01
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	9a 81       	ldd	r25, Y+2	; 0x02
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	f1 f7       	brne	.-4      	; 0x286a <LCD_displayCharacter+0x3c4>
    286e:	9a 83       	std	Y+2, r25	; 0x02
    2870:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2872:	e9 96       	adiw	r28, 0x39	; 57
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	00 d0       	rcall	.+0      	; 0x288a <LCD_displayString+0x6>
    288a:	0f 92       	push	r0
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	9b 83       	std	Y+3, r25	; 0x03
    2892:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2894:	19 82       	std	Y+1, r1	; 0x01
    2896:	0e c0       	rjmp	.+28     	; 0x28b4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	28 2f       	mov	r18, r24
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
    28a0:	9b 81       	ldd	r25, Y+3	; 0x03
    28a2:	fc 01       	movw	r30, r24
    28a4:	e2 0f       	add	r30, r18
    28a6:	f3 1f       	adc	r31, r19
    28a8:	80 81       	ld	r24, Z
    28aa:	0e 94 53 12 	call	0x24a6	; 0x24a6 <LCD_displayCharacter>
		i++;
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	8f 5f       	subi	r24, 0xFF	; 255
    28b2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	28 2f       	mov	r18, r24
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	9b 81       	ldd	r25, Y+3	; 0x03
    28be:	fc 01       	movw	r30, r24
    28c0:	e2 0f       	add	r30, r18
    28c2:	f3 1f       	adc	r31, r19
    28c4:	80 81       	ld	r24, Z
    28c6:	88 23       	and	r24, r24
    28c8:	39 f7       	brne	.-50     	; 0x2898 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	cf 91       	pop	r28
    28d2:	df 91       	pop	r29
    28d4:	08 95       	ret

000028d6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    28d6:	df 93       	push	r29
    28d8:	cf 93       	push	r28
    28da:	00 d0       	rcall	.+0      	; 0x28dc <LCD_moveCursor+0x6>
    28dc:	00 d0       	rcall	.+0      	; 0x28de <LCD_moveCursor+0x8>
    28de:	0f 92       	push	r0
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	8a 83       	std	Y+2, r24	; 0x02
    28e6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	28 2f       	mov	r18, r24
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	3d 83       	std	Y+5, r19	; 0x05
    28f0:	2c 83       	std	Y+4, r18	; 0x04
    28f2:	8c 81       	ldd	r24, Y+4	; 0x04
    28f4:	9d 81       	ldd	r25, Y+5	; 0x05
    28f6:	81 30       	cpi	r24, 0x01	; 1
    28f8:	91 05       	cpc	r25, r1
    28fa:	c1 f0       	breq	.+48     	; 0x292c <LCD_moveCursor+0x56>
    28fc:	2c 81       	ldd	r18, Y+4	; 0x04
    28fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2900:	22 30       	cpi	r18, 0x02	; 2
    2902:	31 05       	cpc	r19, r1
    2904:	2c f4       	brge	.+10     	; 0x2910 <LCD_moveCursor+0x3a>
    2906:	8c 81       	ldd	r24, Y+4	; 0x04
    2908:	9d 81       	ldd	r25, Y+5	; 0x05
    290a:	00 97       	sbiw	r24, 0x00	; 0
    290c:	61 f0       	breq	.+24     	; 0x2926 <LCD_moveCursor+0x50>
    290e:	19 c0       	rjmp	.+50     	; 0x2942 <LCD_moveCursor+0x6c>
    2910:	2c 81       	ldd	r18, Y+4	; 0x04
    2912:	3d 81       	ldd	r19, Y+5	; 0x05
    2914:	22 30       	cpi	r18, 0x02	; 2
    2916:	31 05       	cpc	r19, r1
    2918:	69 f0       	breq	.+26     	; 0x2934 <LCD_moveCursor+0x5e>
    291a:	8c 81       	ldd	r24, Y+4	; 0x04
    291c:	9d 81       	ldd	r25, Y+5	; 0x05
    291e:	83 30       	cpi	r24, 0x03	; 3
    2920:	91 05       	cpc	r25, r1
    2922:	61 f0       	breq	.+24     	; 0x293c <LCD_moveCursor+0x66>
    2924:	0e c0       	rjmp	.+28     	; 0x2942 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2926:	8b 81       	ldd	r24, Y+3	; 0x03
    2928:	89 83       	std	Y+1, r24	; 0x01
    292a:	0b c0       	rjmp	.+22     	; 0x2942 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	80 5c       	subi	r24, 0xC0	; 192
    2930:	89 83       	std	Y+1, r24	; 0x01
    2932:	07 c0       	rjmp	.+14     	; 0x2942 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2934:	8b 81       	ldd	r24, Y+3	; 0x03
    2936:	80 5f       	subi	r24, 0xF0	; 240
    2938:	89 83       	std	Y+1, r24	; 0x01
    293a:	03 c0       	rjmp	.+6      	; 0x2942 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    293c:	8b 81       	ldd	r24, Y+3	; 0x03
    293e:	80 5b       	subi	r24, 0xB0	; 176
    2940:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	80 68       	ori	r24, 0x80	; 128
    2946:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_sendCommand>
}
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
    2954:	cf 91       	pop	r28
    2956:	df 91       	pop	r29
    2958:	08 95       	ret

0000295a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    295a:	df 93       	push	r29
    295c:	cf 93       	push	r28
    295e:	00 d0       	rcall	.+0      	; 0x2960 <LCD_displayStringRowColumn+0x6>
    2960:	00 d0       	rcall	.+0      	; 0x2962 <LCD_displayStringRowColumn+0x8>
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
    2966:	89 83       	std	Y+1, r24	; 0x01
    2968:	6a 83       	std	Y+2, r22	; 0x02
    296a:	5c 83       	std	Y+4, r21	; 0x04
    296c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	6a 81       	ldd	r22, Y+2	; 0x02
    2972:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2976:	8b 81       	ldd	r24, Y+3	; 0x03
    2978:	9c 81       	ldd	r25, Y+4	; 0x04
    297a:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
}
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	08 95       	ret

0000298c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    298c:	df 93       	push	r29
    298e:	cf 93       	push	r28
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
    2994:	62 97       	sbiw	r28, 0x12	; 18
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	de bf       	out	0x3e, r29	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	9a 8b       	std	Y+18, r25	; 0x12
    29a2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    29a4:	89 89       	ldd	r24, Y+17	; 0x11
    29a6:	9a 89       	ldd	r25, Y+18	; 0x12
    29a8:	9e 01       	movw	r18, r28
    29aa:	2f 5f       	subi	r18, 0xFF	; 255
    29ac:	3f 4f       	sbci	r19, 0xFF	; 255
    29ae:	b9 01       	movw	r22, r18
    29b0:	4a e0       	ldi	r20, 0x0A	; 10
    29b2:	50 e0       	ldi	r21, 0x00	; 0
    29b4:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <itoa>
   LCD_displayString(buff); /* Display the string */
    29b8:	ce 01       	movw	r24, r28
    29ba:	01 96       	adiw	r24, 0x01	; 1
    29bc:	0e 94 42 14 	call	0x2884	; 0x2884 <LCD_displayString>
}
    29c0:	62 96       	adiw	r28, 0x12	; 18
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	f8 94       	cli
    29c6:	de bf       	out	0x3e, r29	; 62
    29c8:	0f be       	out	0x3f, r0	; 63
    29ca:	cd bf       	out	0x3d, r28	; 61
    29cc:	cf 91       	pop	r28
    29ce:	df 91       	pop	r29
    29d0:	08 95       	ret

000029d2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    29d2:	df 93       	push	r29
    29d4:	cf 93       	push	r28
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_sendCommand>
}
    29e0:	cf 91       	pop	r28
    29e2:	df 91       	pop	r29
    29e4:	08 95       	ret

000029e6 <Timer1_init>:
 * ● Inputs: pointer to the configuration structure with type
 *    Timer1_ConfigType.
 * ● Return: None
 *********************************************************************/

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    29e6:	df 93       	push	r29
    29e8:	cf 93       	push	r28
    29ea:	00 d0       	rcall	.+0      	; 0x29ec <Timer1_init+0x6>
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
    29f0:	9a 83       	std	Y+2, r25	; 0x02
    29f2:	89 83       	std	Y+1, r24	; 0x01
	//SREG|=(1<<7);


	if(Config_Ptr->mode == TIMER1_NORMAL_Mode)
    29f4:	e9 81       	ldd	r30, Y+1	; 0x01
    29f6:	fa 81       	ldd	r31, Y+2	; 0x02
    29f8:	85 81       	ldd	r24, Z+5	; 0x05
    29fa:	88 23       	and	r24, r24
    29fc:	29 f4       	brne	.+10     	; 0x2a08 <Timer1_init+0x22>
		/* Configure timer control register TCCR1A
		 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
		 * 2. FOC1A=1 FOC1B=1
		 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
		 */
		TCCR1A = 0x0C;
    29fe:	ef e4       	ldi	r30, 0x4F	; 79
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	8c e0       	ldi	r24, 0x0C	; 12
    2a04:	80 83       	st	Z, r24
    2a06:	11 c0       	rjmp	.+34     	; 0x2a2a <Timer1_init+0x44>
		/* Configure timer control register TCCR1A
		 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
		 * 2. FOC1A=1 FOC1B=1
		 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
		 */
		TCCR1A = 0x0C;
    2a08:	ef e4       	ldi	r30, 0x4F	; 79
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	8c e0       	ldi	r24, 0x0C	; 12
    2a0e:	80 83       	st	Z, r24
		/* Configure timer control register TCCR1B
		 * 1. CTC Mode WGM12=1  (Comapare mode)
		 ***/
		TCCR1B = 0x08;
    2a10:	ee e4       	ldi	r30, 0x4E	; 78
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	88 e0       	ldi	r24, 0x08	; 8
    2a16:	80 83       	st	Z, r24
		/****************configure compare value ******************/
		OCR1A = Config_Ptr->compare_value;
    2a18:	aa e4       	ldi	r26, 0x4A	; 74
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a20:	82 81       	ldd	r24, Z+2	; 0x02
    2a22:	93 81       	ldd	r25, Z+3	; 0x03
    2a24:	11 96       	adiw	r26, 0x01	; 1
    2a26:	9c 93       	st	X, r25
    2a28:	8e 93       	st	-X, r24


	}
	/*****************start count from initial value************/
	TCNT1 = Config_Ptr->initial_value;
    2a2a:	ac e4       	ldi	r26, 0x4C	; 76
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a30:	fa 81       	ldd	r31, Y+2	; 0x02
    2a32:	80 81       	ld	r24, Z
    2a34:	91 81       	ldd	r25, Z+1	; 0x01
    2a36:	11 96       	adiw	r26, 0x01	; 1
    2a38:	9c 93       	st	X, r25
    2a3a:	8e 93       	st	-X, r24

	/**********************configure  prescalar********************/
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler & 0x07);
    2a3c:	ae e4       	ldi	r26, 0x4E	; 78
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	ee e4       	ldi	r30, 0x4E	; 78
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	98 2f       	mov	r25, r24
    2a48:	98 7f       	andi	r25, 0xF8	; 248
    2a4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4e:	84 81       	ldd	r24, Z+4	; 0x04
    2a50:	87 70       	andi	r24, 0x07	; 7
    2a52:	89 2b       	or	r24, r25
    2a54:	8c 93       	st	X, r24

	if (Config_Ptr->mode==TIMER1_NORMAL_Mode){
    2a56:	e9 81       	ldd	r30, Y+1	; 0x01
    2a58:	fa 81       	ldd	r31, Y+2	; 0x02
    2a5a:	85 81       	ldd	r24, Z+5	; 0x05
    2a5c:	88 23       	and	r24, r24
    2a5e:	29 f4       	brne	.+10     	; 0x2a6a <Timer1_init+0x84>
		/*
		 * Over flow interrupt enable
		 */
		TIMSK=(1<<TOIE1);
    2a60:	e9 e5       	ldi	r30, 0x59	; 89
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	84 e0       	ldi	r24, 0x04	; 4
    2a66:	80 83       	st	Z, r24
    2a68:	04 c0       	rjmp	.+8      	; 0x2a72 <Timer1_init+0x8c>
	}
	else {
		/*
		 * compare interrupt interrupt enable
		 */
		TIMSK=(1<<OCIE1A);
    2a6a:	e9 e5       	ldi	r30, 0x59	; 89
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 e1       	ldi	r24, 0x10	; 16
    2a70:	80 83       	st	Z, r24
	}
}
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	cf 91       	pop	r28
    2a78:	df 91       	pop	r29
    2a7a:	08 95       	ret

00002a7c <Timer1_deInit>:
 *   ⮚ Function to disable the Timer1
 * ● Inputs: NONE
 * ● Return: None
 *********************************************************************/

void Timer1_deInit(void){
    2a7c:	df 93       	push	r29
    2a7e:	cf 93       	push	r28
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
	//	SREG&=~(1<<7);
	TCCR1B = 0;
    2a84:	ee e4       	ldi	r30, 0x4E	; 78
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	10 82       	st	Z, r1
	TCCR1A = 0;
    2a8a:	ef e4       	ldi	r30, 0x4F	; 79
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	10 82       	st	Z, r1
	OCR1A = 0;
    2a90:	ea e4       	ldi	r30, 0x4A	; 74
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	11 82       	std	Z+1, r1	; 0x01
    2a96:	10 82       	st	Z, r1
	TCNT1 = 0;
    2a98:	ec e4       	ldi	r30, 0x4C	; 76
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	11 82       	std	Z+1, r1	; 0x01
    2a9e:	10 82       	st	Z, r1
}
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <Timer1_setCallBack>:
 * ● Description
 *   ⮚ Function to set the Call Back function address
 * ● Inputs: pointer to Call Back function
 * ● Return: None
 ***********************************************************/
void Timer1_setCallBack(void(*a_ptr)(void)){
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	00 d0       	rcall	.+0      	; 0x2aac <Timer1_setCallBack+0x6>
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
    2ab0:	9a 83       	std	Y+2, r25	; 0x02
    2ab2:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = (volatile void (*)(void))a_ptr;
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab8:	90 93 49 01 	sts	0x0149, r25
    2abc:	80 93 48 01 	sts	0x0148, r24

}
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	cf 91       	pop	r28
    2ac6:	df 91       	pop	r29
    2ac8:	08 95       	ret

00002aca <__vector_7>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
    2aca:	1f 92       	push	r1
    2acc:	0f 92       	push	r0
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	0f 92       	push	r0
    2ad2:	11 24       	eor	r1, r1
    2ad4:	2f 93       	push	r18
    2ad6:	3f 93       	push	r19
    2ad8:	4f 93       	push	r20
    2ada:	5f 93       	push	r21
    2adc:	6f 93       	push	r22
    2ade:	7f 93       	push	r23
    2ae0:	8f 93       	push	r24
    2ae2:	9f 93       	push	r25
    2ae4:	af 93       	push	r26
    2ae6:	bf 93       	push	r27
    2ae8:	ef 93       	push	r30
    2aea:	ff 93       	push	r31
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	cd b7       	in	r28, 0x3d	; 61
    2af2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2af4:	80 91 48 01 	lds	r24, 0x0148
    2af8:	90 91 49 01 	lds	r25, 0x0149
    2afc:	00 97       	sbiw	r24, 0x00	; 0
    2afe:	29 f0       	breq	.+10     	; 0x2b0a <__vector_7+0x40>
	{
		(* g_callBackPtr)();
    2b00:	e0 91 48 01 	lds	r30, 0x0148
    2b04:	f0 91 49 01 	lds	r31, 0x0149
    2b08:	09 95       	icall
	}
}
    2b0a:	cf 91       	pop	r28
    2b0c:	df 91       	pop	r29
    2b0e:	ff 91       	pop	r31
    2b10:	ef 91       	pop	r30
    2b12:	bf 91       	pop	r27
    2b14:	af 91       	pop	r26
    2b16:	9f 91       	pop	r25
    2b18:	8f 91       	pop	r24
    2b1a:	7f 91       	pop	r23
    2b1c:	6f 91       	pop	r22
    2b1e:	5f 91       	pop	r21
    2b20:	4f 91       	pop	r20
    2b22:	3f 91       	pop	r19
    2b24:	2f 91       	pop	r18
    2b26:	0f 90       	pop	r0
    2b28:	0f be       	out	0x3f, r0	; 63
    2b2a:	0f 90       	pop	r0
    2b2c:	1f 90       	pop	r1
    2b2e:	18 95       	reti

00002b30 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    2b30:	1f 92       	push	r1
    2b32:	0f 92       	push	r0
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	0f 92       	push	r0
    2b38:	11 24       	eor	r1, r1
    2b3a:	2f 93       	push	r18
    2b3c:	3f 93       	push	r19
    2b3e:	4f 93       	push	r20
    2b40:	5f 93       	push	r21
    2b42:	6f 93       	push	r22
    2b44:	7f 93       	push	r23
    2b46:	8f 93       	push	r24
    2b48:	9f 93       	push	r25
    2b4a:	af 93       	push	r26
    2b4c:	bf 93       	push	r27
    2b4e:	ef 93       	push	r30
    2b50:	ff 93       	push	r31
    2b52:	df 93       	push	r29
    2b54:	cf 93       	push	r28
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2b5a:	80 91 48 01 	lds	r24, 0x0148
    2b5e:	90 91 49 01 	lds	r25, 0x0149
    2b62:	00 97       	sbiw	r24, 0x00	; 0
    2b64:	29 f0       	breq	.+10     	; 0x2b70 <__vector_9+0x40>
	{
		(* g_callBackPtr)();
    2b66:	e0 91 48 01 	lds	r30, 0x0148
    2b6a:	f0 91 49 01 	lds	r31, 0x0149
    2b6e:	09 95       	icall
	}
}
    2b70:	cf 91       	pop	r28
    2b72:	df 91       	pop	r29
    2b74:	ff 91       	pop	r31
    2b76:	ef 91       	pop	r30
    2b78:	bf 91       	pop	r27
    2b7a:	af 91       	pop	r26
    2b7c:	9f 91       	pop	r25
    2b7e:	8f 91       	pop	r24
    2b80:	7f 91       	pop	r23
    2b82:	6f 91       	pop	r22
    2b84:	5f 91       	pop	r21
    2b86:	4f 91       	pop	r20
    2b88:	3f 91       	pop	r19
    2b8a:	2f 91       	pop	r18
    2b8c:	0f 90       	pop	r0
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	0f 90       	pop	r0
    2b92:	1f 90       	pop	r1
    2b94:	18 95       	reti

00002b96 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * config_ptr )
{
    2b96:	df 93       	push	r29
    2b98:	cf 93       	push	r28
    2b9a:	00 d0       	rcall	.+0      	; 0x2b9c <UART_init+0x6>
    2b9c:	00 d0       	rcall	.+0      	; 0x2b9e <UART_init+0x8>
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
    2ba2:	9c 83       	std	Y+4, r25	; 0x04
    2ba4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2ba6:	1a 82       	std	Y+2, r1	; 0x02
    2ba8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2baa:	eb e2       	ldi	r30, 0x2B	; 43
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	82 e0       	ldi	r24, 0x02	; 2
    2bb0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2bb2:	ea e2       	ldi	r30, 0x2A	; 42
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	88 e1       	ldi	r24, 0x18	; 24
    2bb8:	80 83       	st	Z, r24
	 * UMSEL   = 0 Asynchronous Operation
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC |= (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    2bba:	a0 e4       	ldi	r26, 0x40	; 64
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	e0 e4       	ldi	r30, 0x40	; 64
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	86 68       	ori	r24, 0x86	; 134
    2bc6:	8c 93       	st	X, r24
    /**********************************************************
     * Setup parity bit
     * Setup stop bit
     * Setup bit data
     ********************************************************/
	UCSRC =     ( UCSRC&0x3F )    |  ((config_ptr->parity)<<4);
    2bc8:	a0 e4       	ldi	r26, 0x40	; 64
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	e0 e4       	ldi	r30, 0x40	; 64
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	2f 73       	andi	r18, 0x3F	; 63
    2bd6:	eb 81       	ldd	r30, Y+3	; 0x03
    2bd8:	fc 81       	ldd	r31, Y+4	; 0x04
    2bda:	81 81       	ldd	r24, Z+1	; 0x01
    2bdc:	88 2f       	mov	r24, r24
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	82 95       	swap	r24
    2be2:	92 95       	swap	r25
    2be4:	90 7f       	andi	r25, 0xF0	; 240
    2be6:	98 27       	eor	r25, r24
    2be8:	80 7f       	andi	r24, 0xF0	; 240
    2bea:	98 27       	eor	r25, r24
    2bec:	82 2b       	or	r24, r18
    2bee:	8c 93       	st	X, r24

	UCSRC =     ( UCSRC&0xF7 )    |  ((config_ptr->stop_bit)<<3);
    2bf0:	a0 e4       	ldi	r26, 0x40	; 64
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	e0 e4       	ldi	r30, 0x40	; 64
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	28 2f       	mov	r18, r24
    2bfc:	27 7f       	andi	r18, 0xF7	; 247
    2bfe:	eb 81       	ldd	r30, Y+3	; 0x03
    2c00:	fc 81       	ldd	r31, Y+4	; 0x04
    2c02:	82 81       	ldd	r24, Z+2	; 0x02
    2c04:	88 2f       	mov	r24, r24
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	88 0f       	add	r24, r24
    2c0a:	99 1f       	adc	r25, r25
    2c0c:	88 0f       	add	r24, r24
    2c0e:	99 1f       	adc	r25, r25
    2c10:	88 0f       	add	r24, r24
    2c12:	99 1f       	adc	r25, r25
    2c14:	82 2b       	or	r24, r18
    2c16:	8c 93       	st	X, r24

	UCSRC =     ( UCSRC&0xF9 )    |  ((config_ptr->bit_data)<<1);
    2c18:	a0 e4       	ldi	r26, 0x40	; 64
    2c1a:	b0 e0       	ldi	r27, 0x00	; 0
    2c1c:	e0 e4       	ldi	r30, 0x40	; 64
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	80 81       	ld	r24, Z
    2c22:	28 2f       	mov	r18, r24
    2c24:	29 7f       	andi	r18, 0xF9	; 249
    2c26:	eb 81       	ldd	r30, Y+3	; 0x03
    2c28:	fc 81       	ldd	r31, Y+4	; 0x04
    2c2a:	80 81       	ld	r24, Z
    2c2c:	88 2f       	mov	r24, r24
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	88 0f       	add	r24, r24
    2c32:	99 1f       	adc	r25, r25
    2c34:	82 2b       	or	r24, r18
    2c36:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((config_ptr-> baud_rate) * 8UL))) - 1);
    2c38:	eb 81       	ldd	r30, Y+3	; 0x03
    2c3a:	fc 81       	ldd	r31, Y+4	; 0x04
    2c3c:	83 81       	ldd	r24, Z+3	; 0x03
    2c3e:	94 81       	ldd	r25, Z+4	; 0x04
    2c40:	cc 01       	movw	r24, r24
    2c42:	a0 e0       	ldi	r26, 0x00	; 0
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	88 0f       	add	r24, r24
    2c48:	99 1f       	adc	r25, r25
    2c4a:	aa 1f       	adc	r26, r26
    2c4c:	bb 1f       	adc	r27, r27
    2c4e:	88 0f       	add	r24, r24
    2c50:	99 1f       	adc	r25, r25
    2c52:	aa 1f       	adc	r26, r26
    2c54:	bb 1f       	adc	r27, r27
    2c56:	88 0f       	add	r24, r24
    2c58:	99 1f       	adc	r25, r25
    2c5a:	aa 1f       	adc	r26, r26
    2c5c:	bb 1f       	adc	r27, r27
    2c5e:	9c 01       	movw	r18, r24
    2c60:	ad 01       	movw	r20, r26
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	92 e1       	ldi	r25, 0x12	; 18
    2c66:	aa e7       	ldi	r26, 0x7A	; 122
    2c68:	b0 e0       	ldi	r27, 0x00	; 0
    2c6a:	bc 01       	movw	r22, r24
    2c6c:	cd 01       	movw	r24, r26
    2c6e:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__udivmodsi4>
    2c72:	da 01       	movw	r26, r20
    2c74:	c9 01       	movw	r24, r18
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	9a 83       	std	Y+2, r25	; 0x02
    2c7a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2c7c:	e0 e4       	ldi	r30, 0x40	; 64
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	9a 81       	ldd	r25, Y+2	; 0x02
    2c84:	89 2f       	mov	r24, r25
    2c86:	99 27       	eor	r25, r25
    2c88:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2c8a:	e9 e2       	ldi	r30, 0x29	; 41
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	89 81       	ldd	r24, Y+1	; 0x01
    2c90:	80 83       	st	Z, r24
}
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	0f 92       	push	r0
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2cac:	eb e2       	ldi	r30, 0x2B	; 43
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	80 81       	ld	r24, Z
    2cb2:	88 2f       	mov	r24, r24
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	80 72       	andi	r24, 0x20	; 32
    2cb8:	90 70       	andi	r25, 0x00	; 0
    2cba:	00 97       	sbiw	r24, 0x00	; 0
    2cbc:	b9 f3       	breq	.-18     	; 0x2cac <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2cbe:	ec e2       	ldi	r30, 0x2C	; 44
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	89 81       	ldd	r24, Y+1	; 0x01
    2cc4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2cc6:	0f 90       	pop	r0
    2cc8:	cf 91       	pop	r28
    2cca:	df 91       	pop	r29
    2ccc:	08 95       	ret

00002cce <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2cce:	df 93       	push	r29
    2cd0:	cf 93       	push	r28
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2cd6:	eb e2       	ldi	r30, 0x2B	; 43
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	88 23       	and	r24, r24
    2cde:	dc f7       	brge	.-10     	; 0x2cd6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2ce0:	ec e2       	ldi	r30, 0x2C	; 44
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 81       	ld	r24, Z
}
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	08 95       	ret

00002cec <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	00 d0       	rcall	.+0      	; 0x2cf2 <UART_sendString+0x6>
    2cf2:	0f 92       	push	r0
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62
    2cf8:	9b 83       	std	Y+3, r25	; 0x03
    2cfa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2cfc:	19 82       	std	Y+1, r1	; 0x01
    2cfe:	0e c0       	rjmp	.+28     	; 0x2d1c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	28 2f       	mov	r18, r24
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	8a 81       	ldd	r24, Y+2	; 0x02
    2d08:	9b 81       	ldd	r25, Y+3	; 0x03
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	e2 0f       	add	r30, r18
    2d0e:	f3 1f       	adc	r31, r19
    2d10:	80 81       	ld	r24, Z
    2d12:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <UART_sendByte>
		i++;
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	8f 5f       	subi	r24, 0xFF	; 255
    2d1a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	28 2f       	mov	r18, r24
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	8a 81       	ldd	r24, Y+2	; 0x02
    2d24:	9b 81       	ldd	r25, Y+3	; 0x03
    2d26:	fc 01       	movw	r30, r24
    2d28:	e2 0f       	add	r30, r18
    2d2a:	f3 1f       	adc	r31, r19
    2d2c:	80 81       	ld	r24, Z
    2d2e:	88 23       	and	r24, r24
    2d30:	39 f7       	brne	.-50     	; 0x2d00 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2d32:	0f 90       	pop	r0
    2d34:	0f 90       	pop	r0
    2d36:	0f 90       	pop	r0
    2d38:	cf 91       	pop	r28
    2d3a:	df 91       	pop	r29
    2d3c:	08 95       	ret

00002d3e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2d3e:	0f 93       	push	r16
    2d40:	1f 93       	push	r17
    2d42:	df 93       	push	r29
    2d44:	cf 93       	push	r28
    2d46:	00 d0       	rcall	.+0      	; 0x2d48 <UART_receiveString+0xa>
    2d48:	0f 92       	push	r0
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
    2d4e:	9b 83       	std	Y+3, r25	; 0x03
    2d50:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d52:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
    2d56:	28 2f       	mov	r18, r24
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d5e:	8c 01       	movw	r16, r24
    2d60:	02 0f       	add	r16, r18
    2d62:	13 1f       	adc	r17, r19
    2d64:	0e 94 67 16 	call	0x2cce	; 0x2cce <UART_recieveByte>
    2d68:	f8 01       	movw	r30, r16
    2d6a:	80 83       	st	Z, r24
    2d6c:	0f c0       	rjmp	.+30     	; 0x2d8c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	8f 5f       	subi	r24, 0xFF	; 255
    2d72:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	28 2f       	mov	r18, r24
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7e:	8c 01       	movw	r16, r24
    2d80:	02 0f       	add	r16, r18
    2d82:	13 1f       	adc	r17, r19
    2d84:	0e 94 67 16 	call	0x2cce	; 0x2cce <UART_recieveByte>
    2d88:	f8 01       	movw	r30, r16
    2d8a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	28 2f       	mov	r18, r24
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	8a 81       	ldd	r24, Y+2	; 0x02
    2d94:	9b 81       	ldd	r25, Y+3	; 0x03
    2d96:	fc 01       	movw	r30, r24
    2d98:	e2 0f       	add	r30, r18
    2d9a:	f3 1f       	adc	r31, r19
    2d9c:	80 81       	ld	r24, Z
    2d9e:	83 32       	cpi	r24, 0x23	; 35
    2da0:	31 f7       	brne	.-52     	; 0x2d6e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	28 2f       	mov	r18, r24
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	8a 81       	ldd	r24, Y+2	; 0x02
    2daa:	9b 81       	ldd	r25, Y+3	; 0x03
    2dac:	fc 01       	movw	r30, r24
    2dae:	e2 0f       	add	r30, r18
    2db0:	f3 1f       	adc	r31, r19
    2db2:	10 82       	st	Z, r1
}
    2db4:	0f 90       	pop	r0
    2db6:	0f 90       	pop	r0
    2db8:	0f 90       	pop	r0
    2dba:	cf 91       	pop	r28
    2dbc:	df 91       	pop	r29
    2dbe:	1f 91       	pop	r17
    2dc0:	0f 91       	pop	r16
    2dc2:	08 95       	ret

00002dc4 <__udivmodsi4>:
    2dc4:	a1 e2       	ldi	r26, 0x21	; 33
    2dc6:	1a 2e       	mov	r1, r26
    2dc8:	aa 1b       	sub	r26, r26
    2dca:	bb 1b       	sub	r27, r27
    2dcc:	fd 01       	movw	r30, r26
    2dce:	0d c0       	rjmp	.+26     	; 0x2dea <__udivmodsi4_ep>

00002dd0 <__udivmodsi4_loop>:
    2dd0:	aa 1f       	adc	r26, r26
    2dd2:	bb 1f       	adc	r27, r27
    2dd4:	ee 1f       	adc	r30, r30
    2dd6:	ff 1f       	adc	r31, r31
    2dd8:	a2 17       	cp	r26, r18
    2dda:	b3 07       	cpc	r27, r19
    2ddc:	e4 07       	cpc	r30, r20
    2dde:	f5 07       	cpc	r31, r21
    2de0:	20 f0       	brcs	.+8      	; 0x2dea <__udivmodsi4_ep>
    2de2:	a2 1b       	sub	r26, r18
    2de4:	b3 0b       	sbc	r27, r19
    2de6:	e4 0b       	sbc	r30, r20
    2de8:	f5 0b       	sbc	r31, r21

00002dea <__udivmodsi4_ep>:
    2dea:	66 1f       	adc	r22, r22
    2dec:	77 1f       	adc	r23, r23
    2dee:	88 1f       	adc	r24, r24
    2df0:	99 1f       	adc	r25, r25
    2df2:	1a 94       	dec	r1
    2df4:	69 f7       	brne	.-38     	; 0x2dd0 <__udivmodsi4_loop>
    2df6:	60 95       	com	r22
    2df8:	70 95       	com	r23
    2dfa:	80 95       	com	r24
    2dfc:	90 95       	com	r25
    2dfe:	9b 01       	movw	r18, r22
    2e00:	ac 01       	movw	r20, r24
    2e02:	bd 01       	movw	r22, r26
    2e04:	cf 01       	movw	r24, r30
    2e06:	08 95       	ret

00002e08 <__prologue_saves__>:
    2e08:	2f 92       	push	r2
    2e0a:	3f 92       	push	r3
    2e0c:	4f 92       	push	r4
    2e0e:	5f 92       	push	r5
    2e10:	6f 92       	push	r6
    2e12:	7f 92       	push	r7
    2e14:	8f 92       	push	r8
    2e16:	9f 92       	push	r9
    2e18:	af 92       	push	r10
    2e1a:	bf 92       	push	r11
    2e1c:	cf 92       	push	r12
    2e1e:	df 92       	push	r13
    2e20:	ef 92       	push	r14
    2e22:	ff 92       	push	r15
    2e24:	0f 93       	push	r16
    2e26:	1f 93       	push	r17
    2e28:	cf 93       	push	r28
    2e2a:	df 93       	push	r29
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
    2e30:	ca 1b       	sub	r28, r26
    2e32:	db 0b       	sbc	r29, r27
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	f8 94       	cli
    2e38:	de bf       	out	0x3e, r29	; 62
    2e3a:	0f be       	out	0x3f, r0	; 63
    2e3c:	cd bf       	out	0x3d, r28	; 61
    2e3e:	09 94       	ijmp

00002e40 <__epilogue_restores__>:
    2e40:	2a 88       	ldd	r2, Y+18	; 0x12
    2e42:	39 88       	ldd	r3, Y+17	; 0x11
    2e44:	48 88       	ldd	r4, Y+16	; 0x10
    2e46:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e48:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e50:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e52:	b9 84       	ldd	r11, Y+9	; 0x09
    2e54:	c8 84       	ldd	r12, Y+8	; 0x08
    2e56:	df 80       	ldd	r13, Y+7	; 0x07
    2e58:	ee 80       	ldd	r14, Y+6	; 0x06
    2e5a:	fd 80       	ldd	r15, Y+5	; 0x05
    2e5c:	0c 81       	ldd	r16, Y+4	; 0x04
    2e5e:	1b 81       	ldd	r17, Y+3	; 0x03
    2e60:	aa 81       	ldd	r26, Y+2	; 0x02
    2e62:	b9 81       	ldd	r27, Y+1	; 0x01
    2e64:	ce 0f       	add	r28, r30
    2e66:	d1 1d       	adc	r29, r1
    2e68:	0f b6       	in	r0, 0x3f	; 63
    2e6a:	f8 94       	cli
    2e6c:	de bf       	out	0x3e, r29	; 62
    2e6e:	0f be       	out	0x3f, r0	; 63
    2e70:	cd bf       	out	0x3d, r28	; 61
    2e72:	ed 01       	movw	r28, r26
    2e74:	08 95       	ret

00002e76 <itoa>:
    2e76:	fb 01       	movw	r30, r22
    2e78:	9f 01       	movw	r18, r30
    2e7a:	e8 94       	clt
    2e7c:	42 30       	cpi	r20, 0x02	; 2
    2e7e:	c4 f0       	brlt	.+48     	; 0x2eb0 <itoa+0x3a>
    2e80:	45 32       	cpi	r20, 0x25	; 37
    2e82:	b4 f4       	brge	.+44     	; 0x2eb0 <itoa+0x3a>
    2e84:	4a 30       	cpi	r20, 0x0A	; 10
    2e86:	29 f4       	brne	.+10     	; 0x2e92 <itoa+0x1c>
    2e88:	97 fb       	bst	r25, 7
    2e8a:	1e f4       	brtc	.+6      	; 0x2e92 <itoa+0x1c>
    2e8c:	90 95       	com	r25
    2e8e:	81 95       	neg	r24
    2e90:	9f 4f       	sbci	r25, 0xFF	; 255
    2e92:	64 2f       	mov	r22, r20
    2e94:	77 27       	eor	r23, r23
    2e96:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__udivmodhi4>
    2e9a:	80 5d       	subi	r24, 0xD0	; 208
    2e9c:	8a 33       	cpi	r24, 0x3A	; 58
    2e9e:	0c f0       	brlt	.+2      	; 0x2ea2 <itoa+0x2c>
    2ea0:	89 5d       	subi	r24, 0xD9	; 217
    2ea2:	81 93       	st	Z+, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	00 97       	sbiw	r24, 0x00	; 0
    2ea8:	a1 f7       	brne	.-24     	; 0x2e92 <itoa+0x1c>
    2eaa:	16 f4       	brtc	.+4      	; 0x2eb0 <itoa+0x3a>
    2eac:	5d e2       	ldi	r21, 0x2D	; 45
    2eae:	51 93       	st	Z+, r21
    2eb0:	10 82       	st	Z, r1
    2eb2:	c9 01       	movw	r24, r18
    2eb4:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <strrev>

00002eb8 <strrev>:
    2eb8:	dc 01       	movw	r26, r24
    2eba:	fc 01       	movw	r30, r24
    2ebc:	67 2f       	mov	r22, r23
    2ebe:	71 91       	ld	r23, Z+
    2ec0:	77 23       	and	r23, r23
    2ec2:	e1 f7       	brne	.-8      	; 0x2ebc <strrev+0x4>
    2ec4:	32 97       	sbiw	r30, 0x02	; 2
    2ec6:	04 c0       	rjmp	.+8      	; 0x2ed0 <strrev+0x18>
    2ec8:	7c 91       	ld	r23, X
    2eca:	6d 93       	st	X+, r22
    2ecc:	70 83       	st	Z, r23
    2ece:	62 91       	ld	r22, -Z
    2ed0:	ae 17       	cp	r26, r30
    2ed2:	bf 07       	cpc	r27, r31
    2ed4:	c8 f3       	brcs	.-14     	; 0x2ec8 <strrev+0x10>
    2ed6:	08 95       	ret

00002ed8 <__udivmodhi4>:
    2ed8:	aa 1b       	sub	r26, r26
    2eda:	bb 1b       	sub	r27, r27
    2edc:	51 e1       	ldi	r21, 0x11	; 17
    2ede:	07 c0       	rjmp	.+14     	; 0x2eee <__udivmodhi4_ep>

00002ee0 <__udivmodhi4_loop>:
    2ee0:	aa 1f       	adc	r26, r26
    2ee2:	bb 1f       	adc	r27, r27
    2ee4:	a6 17       	cp	r26, r22
    2ee6:	b7 07       	cpc	r27, r23
    2ee8:	10 f0       	brcs	.+4      	; 0x2eee <__udivmodhi4_ep>
    2eea:	a6 1b       	sub	r26, r22
    2eec:	b7 0b       	sbc	r27, r23

00002eee <__udivmodhi4_ep>:
    2eee:	88 1f       	adc	r24, r24
    2ef0:	99 1f       	adc	r25, r25
    2ef2:	5a 95       	dec	r21
    2ef4:	a9 f7       	brne	.-22     	; 0x2ee0 <__udivmodhi4_loop>
    2ef6:	80 95       	com	r24
    2ef8:	90 95       	com	r25
    2efa:	bc 01       	movw	r22, r24
    2efc:	cd 01       	movw	r24, r26
    2efe:	08 95       	ret

00002f00 <_exit>:
    2f00:	f8 94       	cli

00002f02 <__stop_program>:
    2f02:	ff cf       	rjmp	.-2      	; 0x2f02 <__stop_program>
